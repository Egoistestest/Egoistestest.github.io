<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java.collection</title>
    <url>/2025/03/11/java-collection/</url>
    <content><![CDATA[<h2 id="List：有序可重复"><a href="#List：有序可重复" class="headerlink" title="List：有序可重复"></a>List：有序可重复</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionList</span> &#123;</span><br><span class="line">    <span class="comment">//集合框架</span></span><br><span class="line">    <span class="comment">//Collection（单个对象的存储结构）</span></span><br><span class="line">    <span class="comment">//  List（有序，可重复）</span></span><br><span class="line">    <span class="comment">//      ArrayList</span></span><br><span class="line">    <span class="comment">//  Set（无序，不可重复）</span></span><br><span class="line">    <span class="comment">//      HashSet （底层是哈希表）</span></span><br><span class="line">    <span class="comment">//Map（键值对的存储结构）</span></span><br><span class="line">    <span class="comment">//  HashMap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合&lt;&gt;：泛型，指定集合中存储的数据类型</span></span><br><span class="line">        List&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素：add</span></span><br><span class="line">        collection.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//删除元素：remove</span></span><br><span class="line">        collection.remove(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历元素：增强for,</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Set：无序，不可重复"><a href="#Set：无序，不可重复" class="headerlink" title="Set：无序，不可重复"></a>Set：无序，不可重复</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionSet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//集合框架</span></span><br><span class="line">        <span class="comment">//Collection（单个对象的存储结构）</span></span><br><span class="line">        <span class="comment">//  List（有序，可重复）</span></span><br><span class="line">        <span class="comment">//      ArrayList</span></span><br><span class="line">        <span class="comment">//  Set（无序，不可重复）</span></span><br><span class="line">        <span class="comment">//      HashSet （底层是哈希表）</span></span><br><span class="line">        <span class="comment">//Map（键值对的存储结构）</span></span><br><span class="line">        <span class="comment">//  HashMap</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建set集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        set.remove(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历元素</span></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Map：键值对"><a href="#Map：键值对" class="headerlink" title="Map：键值对"></a>Map：键值对</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Map//集合框架</span></span><br><span class="line">        <span class="comment">//    //Collection（单个对象的存储结构）</span></span><br><span class="line">        <span class="comment">//    //  List（有序，可重复）</span></span><br><span class="line">        <span class="comment">//    //      ArrayList</span></span><br><span class="line">        <span class="comment">//    //  Set（无序，不可重复）</span></span><br><span class="line">        <span class="comment">//    //      HashSet （底层是哈希表）</span></span><br><span class="line">        <span class="comment">//    //Map（键值对的存储结构）</span></span><br><span class="line">        <span class="comment">//    //  HashMap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map</span></span><br><span class="line">        <span class="comment">//HashMap</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> map.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>I/O</title>
    <url>/2025/03/11/I-O/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python2</title>
    <url>/2025/03/11/python2/</url>
    <content><![CDATA[<h3 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h3><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算pow(x,y),x的y次方</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数不支持float</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    dayup ,daydown = <span class="number">1.0</span> , n * <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">366</span>):</span><br><span class="line">        <span class="keyword">if</span> i / <span class="number">7</span> <span class="keyword">in</span> [<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> - daydown)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> + daydown)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;四天打鱼三天晒网的努力结果：&#123;:.2f&#125;.&quot;</span>.<span class="built_in">format</span>(dayup))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数不支持float</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    dayup ,daydown = <span class="number">1.0</span> , n * <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">366</span>):</span><br><span class="line">        <span class="keyword">if</span> i / <span class="number">7</span> <span class="keyword">in</span> [<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> - daydown)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> + daydown)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;五天打鱼两天晒网的努力结果：&#123;:.2f&#125;.&quot;</span>.<span class="built_in">format</span>(dayup))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数不支持float</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    dayup ,daydown = <span class="number">1.0</span> , n * <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">366</span>):</span><br><span class="line">        <span class="keyword">if</span> i / <span class="number">7</span> <span class="keyword">in</span> [<span class="number">0</span>]:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> - daydown)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dayup = dayup * (<span class="number">1</span> + daydown)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;六天打鱼一天晒网的努力结果：&#123;:.2f&#125;.&quot;</span>.<span class="built_in">format</span>(dayup))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;六天打鱼一天晒网的努力结果&quot;</span></span><br><span class="line">b = <span class="string">&quot;五天打鱼两天晒网的努力结果&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="built_in">print</span>(s[<span class="number">0</span>:i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="built_in">print</span>(s[i:<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s + b)</span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">2</span> + b)</span><br><span class="line"><span class="built_in">print</span>(s == b)</span><br><span class="line"><span class="built_in">print</span>(s <span class="keyword">in</span> b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写一个简单的凯撒密码的加密算法</span></span><br><span class="line"><span class="comment"># CaesarCodeEn.py</span></span><br><span class="line">ptxt = <span class="built_in">input</span>(<span class="string">&quot;请输入明文：&quot;</span>)</span><br><span class="line">proptosis = <span class="built_in">input</span>(<span class="string">&quot;请输入加密密钥&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ptxt:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= p &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)+(<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + <span class="number">3</span>)%<span class="number">26</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(p,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写一个简单的凯撒密码的解密算法</span></span><br><span class="line"><span class="comment"># CaesarCodeDe.py</span></span><br><span class="line">etxt = <span class="built_in">input</span>(<span class="string">&quot;请输入密文：&quot;</span>)</span><br><span class="line">proptosis = <span class="built_in">input</span>(<span class="string">&quot;请输入解密密钥&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> etxt:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= p &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)+(<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) - <span class="number">3</span>)%<span class="number">26</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(p,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用的十二个处理字符串的字符串方法</span></span><br><span class="line">s = <span class="string">&quot;Elysia is EXCELLENT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为小写</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())</span><br><span class="line"><span class="comment"># 变为大写</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())</span><br><span class="line"><span class="comment"># 判断是否为小写</span></span><br><span class="line"><span class="built_in">print</span>(s.islower())</span><br><span class="line"><span class="comment"># 判断是否为大写</span></span><br><span class="line"><span class="built_in">print</span>(s.isupper())</span><br><span class="line"><span class="comment"># 判断是否为数字</span></span><br><span class="line"><span class="built_in">print</span>(s.isnumeric())</span><br><span class="line"><span class="comment"># el出现次数</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&quot;el&quot;</span>))</span><br><span class="line"><span class="comment"># 更换</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;is&quot;</span>,<span class="string">&quot;was&quot;</span>))</span><br><span class="line"><span class="comment"># 字符居中</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">50</span>,<span class="string">&quot;=&quot;</span>))</span><br><span class="line"><span class="comment"># 找到字符</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 去掉两侧字符</span></span><br><span class="line"><span class="built_in">print</span>(s.strip(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 拆开</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="built_in">print</span>(s.join(<span class="string">&quot;extraordinary&quot;</span>,<span class="string">&quot;extraordinary&quot;</span>,<span class="string">&quot;extraordinary&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(time())</span><br><span class="line"><span class="built_in">print</span>(ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.1</span></span><br><span class="line">Weight,dayup = <span class="number">85</span>,<span class="number">0.5</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    Weight += dayup</span><br><span class="line">    <span class="built_in">print</span>(Weight)</span><br><span class="line">    <span class="built_in">print</span>(Weight * <span class="number">0.165</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2</span></span><br><span class="line">ability,dayup = <span class="number">1</span>, <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">366</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> <span class="keyword">in</span> [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]:</span><br><span class="line">        ability = ability * (<span class="number">1</span> + dayup)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ability = ability</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一年后的能力值：&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(ability))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3</span></span><br><span class="line">ability,dayup = <span class="number">1</span>, <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">366</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">11</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:            <span class="comment">#学习10天休息一天可以理解为11天为一个周期</span></span><br><span class="line">        ability = ability</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ability = ability * (<span class="number">1</span> + dayup)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一年后的能力值：&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(ability))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4</span></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入一个五位数的数字判断是否是回文数:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="number">5</span> | s.isnumeric() == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误，请检查输入&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s == s[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个回文数:&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这不是一个回文数:&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+---+---+---+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|   |   |   |&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+---+---+---+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|   |   |   |&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+---+---+---+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|   |   |   |&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+---+---+---+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.7</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;/&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;|&quot;</span>,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;|&quot;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s\r&quot;</span> % i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.8</span></span><br><span class="line"><span class="comment">#BatchInstall.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">libs = &#123;<span class="string">&quot;numpy&quot;</span>,<span class="string">&quot;matplotlib&quot;</span>,<span class="string">&quot;pillow&quot;</span>,<span class="string">&quot;jieba&quot;</span>,<span class="string">&quot;pyinstaller&quot;</span>,\</span><br><span class="line">        <span class="string">&quot;requests&quot;</span>,<span class="string">&quot;wheel&quot;</span>,<span class="string">&quot;prettytable&quot;</span>,<span class="string">&quot;wordcloud&quot;</span>,<span class="string">&quot;django&quot;</span>,\</span><br><span class="line">            <span class="string">&quot;flask&quot;</span>,<span class="string">&quot;opencv-python&quot;</span>,<span class="string">&quot;networkx&quot;</span>,<span class="string">&quot;sympy&quot;</span>,<span class="string">&quot;pandas&quot;</span>,\</span><br><span class="line">                <span class="string">&quot;pyqt6&quot;</span>,<span class="string">&quot;panda3d&quot;</span>,<span class="string">&quot;pypdf&quot;</span>,<span class="string">&quot;beautifulsoup4&quot;</span>,<span class="string">&quot;pygame&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> lib <span class="keyword">in</span> libs:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;开始安装 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(lib).center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">       os.system(<span class="string">&quot;pip install &quot;</span>+lib)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部安装成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>)) </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未能全部成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#BatchInstall.py安装python库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">libs = &#123;<span class="string">&quot;tqdm&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> lib <span class="keyword">in</span> libs:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;开始安装 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(lib).center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">       os.system(<span class="string">&quot;pip install &quot;</span>+lib)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部安装成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>)) </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未能全部成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tqdmbar.py进度条工具库</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>)):</span><br><span class="line">    sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 程序控制结构</span></span><br><span class="line"></span><br><span class="line">pre = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入去年同期GDP增速（%）：&quot;</span>))</span><br><span class="line">cur = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入今年同期GDP增速（%）：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> cur &lt; pre * <span class="number">0.7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;经济发展出现问题，需要进行整改&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(x&lt;=y&lt;=z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常的写法</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数!&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>/num)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误，请输入一个整数!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">24</span>&lt;=<span class="number">28</span>&lt;<span class="number">25</span> == <span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#CalPi2.py</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter</span><br><span class="line">DARTS = <span class="number">1000</span>*<span class="number">1000</span></span><br><span class="line">hits = <span class="number">0.0</span></span><br><span class="line">start = perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, DARTS+<span class="number">1</span>):</span><br><span class="line">    x, y = random(), random()</span><br><span class="line">    dist = <span class="built_in">pow</span>(x ** <span class="number">2</span> + y ** <span class="number">2</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> dist &lt;= <span class="number">1.0</span>:</span><br><span class="line">        hits = hits + <span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span> * (hits/DARTS)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; 圆周率值是 : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; 运行时间是 : &#123;:.5f&#125;s&quot;</span>.<span class="built_in">format</span>(perf_counter()-start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># random产生一个0.0 - 1.0之间的随机数</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过for循环创建一个奇数数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    ls = [i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.1</span></span><br><span class="line">target = <span class="number">200</span></span><br><span class="line">guess = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> guess != target:</span><br><span class="line">    guess = <span class="built_in">eval</span>(<span class="built_in">input</span>((<span class="string">&#x27;请输入一个猜测的整数（1至1000）：&#x27;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; target:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜测大了,你已经猜测了&#123;:.2f&#125;次&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; target:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜测小了,你已经猜测了&#123;:.2f&#125;次&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你&#123;:.2f&#125;次就猜对了，你真是个小天才&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2</span></span><br><span class="line">phrase = <span class="built_in">input</span>(<span class="string">&quot;请输入任意一行字符&quot;</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> phrase:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt; i &lt; <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共有&#123;:.2f&#125;个英文字符&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共有&#123;:.2f&#125;个空格&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">elif</span> i.isnumeric() == <span class="literal">True</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共有&#123;:.2f&#125;个数字&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共有&#123;:.2f&#125;个其他字符&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2</span></span><br><span class="line">phrase = <span class="built_in">input</span>(<span class="string">&quot;请输入任意一行字符: &quot;</span>)</span><br><span class="line">letter_count = <span class="number">0</span></span><br><span class="line">space_count = <span class="number">0</span></span><br><span class="line">digit_count = <span class="number">0</span></span><br><span class="line">other_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> phrase:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        letter_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> char.isspace():</span><br><span class="line">        space_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> char.isdigit():</span><br><span class="line">        digit_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英文字符数量: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(letter_count))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;空格数量: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(space_count))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数字数量: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(digit_count))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;其他字符数量: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(other_count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.3</span></span><br><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;请输入一个数字&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来计算最大公约数（GCD）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来计算最小公倍数（LCM）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a * b) // gcd(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取用户输入</span></span><br><span class="line">        num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个正整数: &quot;</span>))</span><br><span class="line">        num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个正整数: &quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查输入是否为正整数</span></span><br><span class="line">        <span class="keyword">if</span> num1 &lt;= <span class="number">0</span> <span class="keyword">or</span> num2 &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入正整数！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 计算并输出结果</span></span><br><span class="line">            gcd_result = gcd(num1, num2)</span><br><span class="line">            lcm_result = lcm(num1, num2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num1&#125;</span> 和 <span class="subst">&#123;num2&#125;</span> 的最大公约数是: <span class="subst">&#123;gcd_result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num1&#125;</span> 和 <span class="subst">&#123;num2&#125;</span> 的最小公倍数是: <span class="subst">&#123;lcm_result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.4</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">target = random.randint(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line">guess = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;猜数字游戏开始！目标数字是 1 到 1000 之间的整数。&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> guess != target:</span><br><span class="line">    guess = <span class="built_in">eval</span>(<span class="built_in">input</span>((<span class="string">&#x27;请输入一个猜测的整数（1至1000）：&#x27;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; target:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜测大了,你已经猜测了&#123;:.2f&#125;次&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; target:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜测小了,你已经猜测了&#123;:.2f&#125;次&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你&#123;:.2f&#125;次就猜对了，你真是个小天才&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.5</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 生成 1 到 1000 的随机整数</span></span><br><span class="line">target = random.randint(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">guess = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;猜数字游戏开始！目标数字是 1 到 1000 之间的整数。&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> guess != target:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取用户输入并转换为整数</span></span><br><span class="line">        guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个猜测的整数（1 至 1000）：&quot;</span>))</span><br><span class="line">        count += <span class="number">1</span>  <span class="comment"># 每次猜测后增加计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断猜测结果</span></span><br><span class="line">        <span class="keyword">if</span> guess &gt; target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;猜测大了！你已经猜测了 <span class="subst">&#123;count&#125;</span> 次。&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> guess &lt; target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;猜测小了！你已经猜测了 <span class="subst">&#123;count&#125;</span> 次。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;你 <span class="subst">&#123;count&#125;</span> 次就猜对了，你真是个小天才！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.6判断闰年</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        year = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个年份&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;这是闰年&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;这不是闰年&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;这是闰年&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;请输入一个年份&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.7整数合规输入</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    number = <span class="built_in">input</span>(<span class="string">&quot;请输入一个十进制的整数: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试将输入转换为整数</span></span><br><span class="line">        num = <span class="built_in">int</span>(number)</span><br><span class="line">        <span class="comment"># 检查输入是否为十进制整数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(num, <span class="built_in">int</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正确输入: 这是一个十进制整数。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请检查这个数是否正确: 输入不是整数。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请检查这个数是否正确: 输入不是有效的十进制整数。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.7整数合规输入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_decimal_integer</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试将输入转换为浮点数</span></span><br><span class="line">        num = <span class="built_in">float</span>(number)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查是否为整数</span></span><br><span class="line">        <span class="keyword">if</span> num.is_integer():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_decimal_integer(user_input):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;user_input&#125;</span>&#x27; 是一个十进制整数。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;user_input&#125;</span>&#x27; 不是一个十进制整数。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    number = <span class="built_in">input</span>(<span class="string">&quot;请输入一个带有小数点的浮点数: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试将输入转换为浮点数</span></span><br><span class="line">        num = <span class="built_in">float</span>(number)</span><br><span class="line">        <span class="comment"># 检查输入是否为浮点数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(num, <span class="built_in">float</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正确输入: 这是一个带有小数点的浮点数。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请检查这个数是否正确: 输入不是带有小数点的浮点数。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请检查这个数是否正确: 输入不是有效的带有小数点的浮点数。&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line"><span class="comment">#DrawSevenSegDisplay.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawLine</span>(<span class="params">draw</span>):   <span class="comment"># 绘制单段数码管</span></span><br><span class="line">    t.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> t.penup()</span><br><span class="line">    t.fd(<span class="number">40</span>)</span><br><span class="line">    t.right(<span class="number">90</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDigit</span>(<span class="params">d</span>): <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    t.left(<span class="number">180</span>)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.fd(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawDate</span>(<span class="params">date</span>):  <span class="comment">#获得要输出的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        drawDigit(<span class="built_in">eval</span>(i))  <span class="comment">#注意: 通过eval()函数将数字变为整数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    t.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.fd(-<span class="number">300</span>)</span><br><span class="line">    t.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(time.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>,time.gmtime()))</span><br><span class="line">    t.hideturtle()</span><br><span class="line">main()    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶乘的计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br><span class="line">num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个正整数:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(fact(num))</span><br><span class="line"><span class="comment"># make it again</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br><span class="line">number = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input one number:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(fact(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符反转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;Please input one string:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斐波那契数列计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(n-<span class="number">2</span>) + f(n - <span class="number">1</span>)</span><br><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;please input one number:&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(f(i),end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 汉诺塔问题</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n,src,dst,mid</span>):</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>,src,dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        hanoi(n-<span class="number">1</span>, src, mid, dst)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(n,src,dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        hanoi(n-<span class="number">1</span>, src, mid, dst)</span><br><span class="line">hanoi(<span class="number">10</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Move in total:&quot;</span>,count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ues len() </span></span><br><span class="line"><span class="comment"># print(len(20.24))</span></span><br><span class="line"><span class="comment"># print(len(220))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;20.2425&quot;</span>))</span><br><span class="line"><span class="comment"># use hex()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">1024</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">12800</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">65536</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 科赫曲线绘制</span></span><br><span class="line"><span class="comment">#DrawKoch.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">koch</span>(<span class="params">size, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        t.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">           t.left(angle)</span><br><span class="line">           koch(size/<span class="number">3</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rank = <span class="number">3</span>     <span class="comment"># 阶数</span></span><br><span class="line">    t.setup(<span class="number">800</span>,<span class="number">400</span>)</span><br><span class="line">    t.speed(<span class="number">0</span>)    <span class="comment"># 控制绘制速度</span></span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(-<span class="number">300</span>, -<span class="number">50</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    koch(<span class="number">600</span>,rank)     <span class="comment"># 绘制曲线</span></span><br><span class="line">    t.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 科赫曲线绘制</span></span><br><span class="line"><span class="comment">#DrawKoch.py reverse dscribe</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">koch</span>(<span class="params">size, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        t.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">           t.left(angle)</span><br><span class="line">           koch(size/<span class="number">3</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rank = <span class="number">3</span>     <span class="comment"># 阶数</span></span><br><span class="line">    t.setup(<span class="number">800</span>,<span class="number">400</span>)</span><br><span class="line">    t.speed(<span class="number">0</span>)    <span class="comment"># 控制绘制速度</span></span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(-<span class="number">300</span>, -<span class="number">50</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    koch(<span class="number">600</span>,rank)     <span class="comment"># 绘制曲线</span></span><br><span class="line">    t.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 科赫曲线绘制</span></span><br><span class="line"><span class="comment">#DrawKoch2.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">koch</span>(<span class="params">size, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        t.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">           t.left(angle)</span><br><span class="line">           koch(size/<span class="number">3</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rank = <span class="number">5</span></span><br><span class="line">    t.setup(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">    t.speed(<span class="number">0</span>)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(-<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    koch(<span class="number">400</span>,rank)     </span><br><span class="line">    t.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,rank)</span><br><span class="line">    t.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,rank)</span><br><span class="line">    t.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.1 error in mistake</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制一行田字格的横线&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;+---&quot;</span> * n + <span class="string">&quot;+&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_space</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制一行田字格的竖线&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;|   &quot;</span> * n + <span class="string">&quot;|&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ground</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制 n x n 的田字格&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        draw_line(n)  <span class="comment"># 绘制横线</span></span><br><span class="line">        draw_space(n)  <span class="comment"># 绘制竖线</span></span><br><span class="line">        ground(n - <span class="number">1</span>)  <span class="comment"># 递归调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        large = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个大于0的整数: &quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> large &gt; <span class="number">0</span>:</span><br><span class="line">            ground(large)</span><br><span class="line">            draw_line(large)  <span class="comment"># 绘制最后一行横线</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入必须大于0！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制一行田字格的横线&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+---&quot;</span> * n + <span class="string">&quot;+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_space</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制一行田字格的竖线&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;|   &quot;</span> * n + <span class="string">&quot;|&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ground</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制 n x n 的田字格&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        draw_line(n)  <span class="comment"># 绘制横线</span></span><br><span class="line">        draw_space(n)  <span class="comment"># 绘制竖线</span></span><br><span class="line">    draw_line(n)  <span class="comment"># 绘制最后一行横线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        large = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个大于0的整数: &quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> large &gt; <span class="number">0</span>:</span><br><span class="line">            ground(large)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入必须大于0！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 奇数判断</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isOdd</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input one number:&quot;</span>)  <span class="comment"># 提示用户输入</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>())  <span class="comment"># 获取用户输入并转换为整数</span></span><br><span class="line">        <span class="keyword">if</span> isOdd(number):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span> 是奇数。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span> 是偶数。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(number, <span class="built_in">int</span>) <span class="keyword">or</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 非整数或小于2的数直接返回False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理2和3的特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排除能被2或3整除的数</span></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> number % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># type() use to ensure integer</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(number) == <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,number + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> number % i == <span class="number">0</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> count &gt; <span class="number">2</span> :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input one number:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        number = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> isPrime(number):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is a prime&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is not a prime&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a advantage way than myselves</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断一个数是否为素数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(number, <span class="built_in">int</span>) <span class="keyword">or</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 非整数或小于2的数直接返回False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理2和3的特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 排除能被2或3整除的数</span></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> number % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 只需检查到sqrt(number)的整数部分</span></span><br><span class="line">    max_divisor = math.isqrt(number) + <span class="number">1</span>  <span class="comment"># Python 3.8+ 支持 math.isqrt</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查6k ± 1的因子</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, max_divisor, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> number % i == <span class="number">0</span> <span class="keyword">or</span> number % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入一个整数：&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> isPrime(number):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span> 是素数&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span> 不是素数&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 2是唯一的偶数素数</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 排除其他偶数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">2</span>):  <span class="comment"># 只检查奇数因子</span></span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入一个大于1的整数：&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入大于1的整数！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;小于<span class="subst">&#123;number&#125;</span>的素数有：&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, number):</span><br><span class="line">                <span class="keyword">if</span> is_prime(i):</span><br><span class="line">                    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入无效，请输入一个整数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">          </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.5</span></span><br><span class="line"><span class="comment"># 5.5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;use to output a string&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">isinstance(value, int) use to judge int</span></span><br><span class="line"><span class="string">isinstance(value, float)  use to judge float</span></span><br><span class="line"><span class="string">isinstance(value, complex)  use to judge complex</span></span><br><span class="line"><span class="string">用来判断数字是否是，但是字符串需要先进行转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isNum</span>(<span class="params">String</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(String,<span class="built_in">int</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(String,<span class="built_in">float</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(String,<span class="built_in">complex</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please fit with an array of numbers:&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        numberlist = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> main(numberlist) == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is True&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;This is not true&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you have a error in your input&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_numeric</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;尝试将字符串转换为整数、浮点数或复数，如果成功则返回True，否则返回False。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 首先尝试转换为整数</span></span><br><span class="line">        <span class="built_in">int</span>(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果整数转换失败，尝试转换为浮点数</span></span><br><span class="line">            <span class="built_in">float</span>(value)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 如果浮点数转换也失败，尝试转换为复数（这里假设复数的形式为&#x27;a+bj&#x27;或&#x27;aj&#x27;）</span></span><br><span class="line">                <span class="built_in">complex</span>(value.replace(<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;1j&#x27;</span>))  <span class="comment"># 因为input()返回的是&#x27;a+bj&#x27;形式，而complex()需要&#x27;aj&#x27;或&#x27;a+bj&#x27;（其中b是实数）</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter an array of numbers separated by spaces:&quot;</span>)</span><br><span class="line">    user_input = <span class="built_in">input</span>().strip()  <span class="comment"># 读取输入并去除首尾空格</span></span><br><span class="line">    numbers = user_input.split()  <span class="comment"># 将输入字符串按空格分割成列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查列表中的每个元素是否都是数字</span></span><br><span class="line">    all_numeric = <span class="built_in">all</span>(is_numeric(num) <span class="keyword">for</span> num <span class="keyword">in</span> numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> all_numeric:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is True&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is not true&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.6</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi</span>(<span class="params">*args</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> args:</span><br><span class="line">        result *= num</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input a lot of numbers&quot;</span>)</span><br><span class="line">    numbers = <span class="built_in">input</span>().split()</span><br><span class="line">    number_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, numbers))</span><br><span class="line">    <span class="built_in">print</span>(multi(*number_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;集合的定义&#x27;&#x27;&#x27;</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">S = <span class="built_in">set</span>(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;the potery is not alone&#x27;&#x27;&#x27;</span></span><br><span class="line">s= <span class="string">&quot;&quot;</span></span><br><span class="line">s = s.replace(<span class="string">&quot;，&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;。&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(<span class="built_in">set</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;Test 9.1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#CalStats.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>():       <span class="comment">#获取用户输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    istr = <span class="built_in">input</span>(<span class="string">&quot; 请输入数字 (输入回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> istr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(istr))</span><br><span class="line">        istr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(输入回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment">#计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>(<span class="params">numbers, mean</span>): <span class="comment">#计算标准差</span></span><br><span class="line">    sdev = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        sdev = sdev + (num - mean)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sdev / <span class="built_in">len</span>(numbers), <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">numbers</span>):    <span class="comment">#计算中位数</span></span><br><span class="line">    new = <span class="built_in">sorted</span>(numbers)</span><br><span class="line">    size = <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">if</span> size % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        med = (new[size//<span class="number">2</span>-<span class="number">1</span>] + new[size//<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        med = new[size//<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> med</span><br><span class="line">n =  getNum() <span class="comment">#主体函数</span></span><br><span class="line">m =  mean(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; 平均值 :&#123;&#125;, 标准差 :&#123;:.2&#125;, 中位数 :&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(m,dev(n,m),median(n)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;Test 9.1 修改&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#CalStats.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNum</span>():       <span class="comment">#获取用户输入</span></span><br><span class="line">    nums = []</span><br><span class="line">    istr = <span class="built_in">input</span>(<span class="string">&quot; 请输入数字 (输入回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> istr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        nums.append(<span class="built_in">eval</span>(istr))</span><br><span class="line">        istr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字(输入回车退出): &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean</span>(<span class="params">numbers</span>):  <span class="comment">#计算平均值</span></span><br><span class="line">    s = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        s = s + num</span><br><span class="line">    <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>(<span class="params">numbers, mean</span>): <span class="comment">#计算标准差</span></span><br><span class="line">    sdev = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        sdev = sdev + (num - mean)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sdev / <span class="built_in">len</span>(numbers), <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">numbers</span>):    <span class="comment">#计算中位数</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;reverse = false is to achieve list in order from small to large&#x27;&#x27;&#x27;</span></span><br><span class="line">    new = <span class="built_in">sorted</span>(numbers,reverse=<span class="literal">False</span>)</span><br><span class="line">    size = <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">if</span> size % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        med = (new[size//<span class="number">2</span>-<span class="number">1</span>] + new[size//<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        med = new[size//<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> med</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;is used to find the miniest one&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comparemini</span>(<span class="params">numbers</span>):</span><br><span class="line">    new = <span class="built_in">sorted</span>(numbers,reverse=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> new[-<span class="number">1</span>]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;is used to find the largest one&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comparemax</span>(<span class="params">numbers</span>):</span><br><span class="line">    new = <span class="built_in">sorted</span>(numbers,reverse=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> new[<span class="number">0</span>]</span><br><span class="line">n =  getNum() <span class="comment">#主体函数</span></span><br><span class="line">m =  mean(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; 平均值 :&#123;&#125;, 标准差 :&#123;:.2&#125;, 中位数 :&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(m,dev(n,m),median(n)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#HamletWordCount.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">fname</span>):</span><br><span class="line">    txt = <span class="built_in">open</span>(fname, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘ &#123;|&#125;~&#x27;</span>:</span><br><span class="line">        txt = txt.replace(ch, <span class="string">&quot; &quot;</span>) <span class="comment"># 用空格替换特殊字符</span></span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText(<span class="string">&quot;hamlet.txt&quot;</span>)</span><br><span class="line">words = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#HamletWordCount2.py</span></span><br><span class="line">excludes = &#123;<span class="string">&quot;the&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;of&quot;</span>,<span class="string">&quot;you&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;my&quot;</span>,<span class="string">&quot;in&quot;</span>&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">fname</span>):</span><br><span class="line">    txt = <span class="built_in">open</span>(fname, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘ &#123;|&#125;~&#x27;</span>:</span><br><span class="line">        txt = txt.replace(ch, <span class="string">&quot; &quot;</span>) <span class="comment"># 用空格替换特殊字符</span></span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText(<span class="string">&quot;hamlet.txt&quot;</span>)</span><br><span class="line">words = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span>(counts[word])</span><br><span class="line"></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#BatchInstall.py安装python库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">libs = &#123;<span class="string">&quot;jieba&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> lib <span class="keyword">in</span> libs:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;开始安装 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(lib).center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">       os.system(<span class="string">&quot;pip install &quot;</span>+lib)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部安装成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>)) </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未能全部成功 &quot;</span>.center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;is used to add 26 english word and number in [0~9] in one list&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;after that crop up ten pwd that with random word&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;import string</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 生成包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line"><span class="string">all_characters = list(string.ascii_lowercase) + list(string.ascii_uppercase) + list(string.digits)</span></span><br><span class="line"><span class="string">print(all_characters)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 生成包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line"><span class="string">all_characters = [chr(i) for i in range(97, 123)] + [chr(i) for i in range(65, 91)] + [str(i) for i in range(10)]</span></span><br><span class="line"><span class="string">print(all_characters)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 手动定义包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line"><span class="string">all_characters = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;,</span></span><br><span class="line"><span class="string">                  &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;,</span></span><br><span class="line"><span class="string">                  &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span></span><br><span class="line"><span class="string">print(all_characters)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 生成包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line"><span class="string">all_characters = [chr(i) for i in range(ord(&#x27;a&#x27;), ord(&#x27;z&#x27;) + 1)] + [chr(i) for i in range(ord(&#x27;A&#x27;), ord(&#x27;Z&#x27;) + 1)] + [str(i) for i in range(10)]</span></span><br><span class="line"><span class="string">print(all_characters)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_pwd</span>():</span><br><span class="line">    <span class="comment"># 生成包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line">    all_characters = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>)] + [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>, <span class="number">91</span>)] + [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="built_in">print</span>(all_characters)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">list</span>()</span><br><span class="line">        <span class="built_in">list</span>[i] = random(all_characters) + random(all_characters) + random(all_characters) + random(all_characters)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(random_pwd())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;alter by Artification Intelligence&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_pwd</span>():</span><br><span class="line">    <span class="comment"># 生成包含所有小写字母、大写字母和数字的列表</span></span><br><span class="line">    all_characters = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>)] + [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>, <span class="number">91</span>)] + [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="built_in">print</span>(all_characters)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 存储生成的随机密码</span></span><br><span class="line">    passwords = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 生成一个随机密码</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;can not use random function correctly , use random.choice to choose pwd by random&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;circle in function&#x27;&#x27;&#x27;</span></span><br><span class="line">        pwd = <span class="string">&#x27;&#x27;</span>.join(random.choice(all_characters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line">        passwords.append(pwd)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> passwords</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(random_pwd())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.list as parameter</span></span><br><span class="line"><span class="string">2.if one element occur twice and more return true</span></span><br><span class="line"><span class="string">3.make list become a set(who is disorder and no repeat)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># other method</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def repeat(lst):</span></span><br><span class="line"><span class="string">    seen = set()</span></span><br><span class="line"><span class="string">    for item in lst:</span></span><br><span class="line"><span class="string">        if item in seen:</span></span><br><span class="line"><span class="string">            return True</span></span><br><span class="line"><span class="string">        seen.add(item)</span></span><br><span class="line"><span class="string">    return False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># other method</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from collections import Counter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def repeat(lst):</span></span><br><span class="line"><span class="string">    counter = Counter(lst)</span></span><br><span class="line"><span class="string">    for num in counter:</span></span><br><span class="line"><span class="string">        if counter[num] &gt; 1:</span></span><br><span class="line"><span class="string">            return True</span></span><br><span class="line"><span class="string">    return False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">list</span>) != <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">list</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input one list to verify&quot;</span>)</span><br><span class="line">    numbers = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(repeat(numbers))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;alter by Artification Intelligence&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(lst) != <span class="built_in">len</span>(<span class="built_in">set</span>(lst))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input one list to verify, elements separated by spaces:&quot;</span>)</span><br><span class="line">    numbers = <span class="built_in">input</span>().split()  <span class="comment"># 将输入字符串按空格分割成列表</span></span><br><span class="line">    numbers = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]  <span class="comment"># 将列表中的每个元素转换为整数</span></span><br><span class="line">    <span class="keyword">if</span> repeat(numbers):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The list contains duplicate elements.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The list does not contain duplicate elements.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(lst) != <span class="built_in">len</span>(<span class="built_in">set</span>(lst))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input one list to verify, elements separated by spaces:&quot;</span>)</span><br><span class="line">    numbers = <span class="built_in">input</span>().split()  <span class="comment"># 将输入字符串按空格分割成列表</span></span><br><span class="line">    numbers = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]  <span class="comment"># 将列表中的每个元素转换为整数</span></span><br><span class="line">    <span class="keyword">if</span> repeat(numbers):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The list contains duplicate elements.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The list does not contain duplicate elements.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.reveive String</span></span><br><span class="line"><span class="string">2.order letter by concequence up to low</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.make string become lowercase</span></span><br><span class="line"><span class="string">2.disearch every letter in list</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_letter_frequency</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 初始化一个空字典来存储字母频率</span></span><br><span class="line">    frequency = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历字符串中的每个字符</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        <span class="comment"># 检查字符是否为字母</span></span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="comment"># 将字符转换为小写，以便统计时不区分大小写</span></span><br><span class="line">            char = char.lower()</span><br><span class="line">            <span class="comment"># 如果字符已经在字典中，增加其计数</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> frequency:</span><br><span class="line">                frequency[char] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果字符不在字典中，初始化其计数为1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                frequency[char] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> frequency</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input a String&quot;</span>)</span><br><span class="line">    Str = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(count_letter_frequency(Str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;order letter by concequence up to low&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frequency_sort</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 步骤1：统计字符频率</span></span><br><span class="line">    freq_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> freq_dict:</span><br><span class="line">            freq_dict[char] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            freq_dict[char] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤2：将字典转换为列表</span></span><br><span class="line">    freq_list = <span class="built_in">list</span>(freq_dict.items())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤3：排序</span></span><br><span class="line">    freq_list.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤4：生成结果字符串</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> char, freq <span class="keyword">in</span> freq_list:</span><br><span class="line">        result += char * freq</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please input a String&quot;</span>)</span><br><span class="line">    Str = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(frequency_sort(Str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;I don&#x27;not want to solve&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 6.5</span></span><br><span class="line"><span class="comment"># 6.6</span></span><br><span class="line"><span class="comment"># 6.7</span></span><br><span class="line"><span class="comment"># 6.8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with open(&quot;E:\px.txt&quot;,&quot;rt&quot;) as tf:</span></span><br><span class="line"><span class="comment">#     print(tf.readline())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&quot;E:\px.txt&quot;,&quot;rb&quot;) as bf:</span></span><br><span class="line"><span class="comment">#     print(bf.readline())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&quot;E:\px.txt&quot;,&quot;rt&quot;,encoding=&#x27;utf-8&#x27;) as tf:</span></span><br><span class="line"><span class="comment">#     print(tf.readline())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #DrawRptOne.py</span></span><br><span class="line"><span class="comment"># import jieba</span></span><br><span class="line"><span class="comment"># import wordcloud</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fname = &quot;中央一号文件 \\&quot; + \</span></span><br><span class="line"><span class="comment"># &quot;2023-中共中央、国务院关于做好 2023 年全面推进乡村振兴重点工作的意见.txt&quot;</span></span><br><span class="line"><span class="comment"># with open(fname, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span></span><br><span class="line"><span class="comment">#     ls = jieba.lcut(f.read())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># w = wordcloud.WordCloud( \</span></span><br><span class="line"><span class="comment">#     width = 1000, height = 700,\</span></span><br><span class="line"><span class="comment">#     background_color = &quot;white&quot;,\</span></span><br><span class="line"><span class="comment">#     font_path = &quot;msyh.ttc&quot;\</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment"># txt = &quot; &quot;.join(ls)</span></span><br><span class="line"><span class="comment"># w.generate(txt)</span></span><br><span class="line"><span class="comment"># w.to_file(&quot;RptOneWordle01.png&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #DrawRptOne2.py</span></span><br><span class="line"><span class="comment"># import jieba</span></span><br><span class="line"><span class="comment"># import wordcloud</span></span><br><span class="line"><span class="comment"># fname = &quot;中央一号文件 \\&quot; + \</span></span><br><span class="line"><span class="comment"># &quot;2023-中共中央、国务院关于做好 2023 年全面推进乡村振兴重点工作的意见.txt&quot;</span></span><br><span class="line"><span class="comment"># with open(fname, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span></span><br><span class="line"><span class="comment">#     ls = jieba.lcut(f.read())</span></span><br><span class="line"><span class="comment"># for item in reversed(ls):</span></span><br><span class="line"><span class="comment">#     if len(item) == 1 or 2:</span></span><br><span class="line"><span class="comment">#         ls.remove(item)</span></span><br><span class="line"><span class="comment"># w = wordcloud.WordCloud( \</span></span><br><span class="line"><span class="comment">#     width = 1000, height = 700,\</span></span><br><span class="line"><span class="comment">#     background_color = &quot;white&quot;,\</span></span><br><span class="line"><span class="comment">#     font_path = &quot;msyh.ttc&quot;\</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment"># txt = &quot; &quot;.join(ls)</span></span><br><span class="line"><span class="comment"># w.generate(txt)</span></span><br><span class="line"><span class="comment"># w.to_file(&quot;RptOneWordle01.png&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">disearch list in disorder</span></span><br><span class="line"><span class="string">1.   my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">   for item in reversed(my_list):</span></span><br><span class="line"><span class="string">       print(item)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.   my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">   for item in my_list[::-1]:</span></span><br><span class="line"><span class="string">       print(item)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.   my_list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="string">   for index, value in enumerate(reversed(my_list)):</span></span><br><span class="line"><span class="string">       print(index, value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.   my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">   for i in range(len(my_list) - 1, -1, -1):</span></span><br><span class="line"><span class="string">       print(my_list[i])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5.   my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">   index = len(my_list) - 1</span></span><br><span class="line"><span class="string">   while index &gt;= 0:</span></span><br><span class="line"><span class="string">       print(my_list[index])</span></span><br><span class="line"><span class="string">       index -= 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6.   my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">   for item in (my_list[i] for i in range(len(my_list) - 1, -1, -1)):</span></span><br><span class="line"><span class="string">       print(item)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;Word Cloud how to use&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import wordcloud</span></span><br><span class="line"><span class="string">text = &quot;&quot;</span></span><br><span class="line"><span class="string">w = wordcloud.WordCloud(width,height,min_font_size ...)</span></span><br><span class="line"><span class="string">w.generate(text)</span></span><br><span class="line"><span class="string">w.to_file(&quot;SimpleWordle.png&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># import wordcloud</span></span><br><span class="line"><span class="comment"># text = &quot;&quot;</span></span><br><span class="line"><span class="comment"># w = wordcloud.WordCloud()</span></span><br><span class="line"><span class="comment"># w.generate(text)</span></span><br><span class="line"><span class="comment"># w.to_file(&quot;SimpleWordle.png&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># import jieba </span></span><br><span class="line"><span class="comment"># import wordcloud</span></span><br><span class="line"><span class="comment"># from imageio.v3 import imread</span></span><br><span class="line"><span class="comment"># mask = imread(&quot;wafer.jpg&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># txt = &quot; 程序设计语言是计算机能够理解和识别用户操作意图的一种交互体系，\</span></span><br><span class="line"><span class="comment">#     它按照特定规则组织计算机指令，使计算机能够自动进行各种运算处理。&quot;</span></span><br><span class="line"><span class="comment"># w = wordcloud.WordCloud( width=1000,height=1000,mask = mask,\</span></span><br><span class="line"><span class="comment">#                         font_path=&quot;msyh.ttc&quot;, background_color=&quot;white&quot;)</span></span><br><span class="line"><span class="comment"># w.generate(&quot; &quot;.join(jieba.lcut(txt)))</span></span><br><span class="line"><span class="comment"># w.to_file(&quot;pyWordle3.png&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #BatchInstall.py安装python库</span></span><br><span class="line"><span class="comment"># import os</span></span><br><span class="line"><span class="comment"># libs = &#123;&quot;imageio&quot;&#125;</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     for lib in libs:</span></span><br><span class="line"><span class="comment">#        print(&quot;开始安装 &#123;&#125;&quot;.format(lib).center(20,&#x27;-&#x27;))</span></span><br><span class="line"><span class="comment">#        os.system(&quot;pip install &quot;+lib)</span></span><br><span class="line"><span class="comment">#     print(&quot;全部安装成功 &quot;.center(20,&#x27;-&#x27;)) </span></span><br><span class="line"><span class="comment"># except:</span></span><br><span class="line"><span class="comment">#     print(&quot;未能全部成功 &quot;.center(20,&#x27;-&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.1</span></span><br><span class="line"><span class="comment"># 7.2</span></span><br><span class="line"><span class="comment"># 7.3</span></span><br><span class="line"><span class="comment"># 7.4</span></span><br><span class="line"><span class="comment"># 7.5</span></span><br><span class="line"><span class="comment"># 7.6</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python1</title>
    <url>/2025/03/11/python1/</url>
    <content><![CDATA[<h3 id="基本python库"><a href="#基本python库" class="headerlink" title="基本python库"></a>基本python库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用的十二个处理字符串的字符串方法</span></span><br><span class="line">s = <span class="string">&quot;Elysia is EXCELLENT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为小写</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())</span><br><span class="line"><span class="comment"># 变为大写</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())</span><br><span class="line"><span class="comment"># 判断是否为小写</span></span><br><span class="line"><span class="built_in">print</span>(s.islower())</span><br><span class="line"><span class="comment"># 判断是否为大写</span></span><br><span class="line"><span class="built_in">print</span>(s.isupper())</span><br><span class="line"><span class="comment"># 判断是否为数字</span></span><br><span class="line"><span class="built_in">print</span>(s.isnumeric())</span><br><span class="line"><span class="comment"># el出现次数</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&quot;el&quot;</span>))</span><br><span class="line"><span class="comment"># 更换</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;is&quot;</span>,<span class="string">&quot;was&quot;</span>))</span><br><span class="line"><span class="comment"># 字符居中</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">50</span>,<span class="string">&quot;=&quot;</span>))</span><br><span class="line"><span class="comment"># 找到字符</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 去掉两侧字符</span></span><br><span class="line"><span class="built_in">print</span>(s.strip(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 拆开</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot;Elysia&quot;</span>))</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="built_in">print</span>(s.join(<span class="string">&quot;extraordinary&quot;</span>,<span class="string">&quot;extraordinary&quot;</span>,<span class="string">&quot;extraordinary&quot;</span>))</span><br><span class="line"><span class="comment">#格式化</span></span><br><span class="line">s.<span class="built_in">format</span>()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;Please speak loudly:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> +<span class="string">&quot;  &quot;</span> + <span class="built_in">str</span> + <span class="string">&quot;  &quot;</span> + <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">a,b=<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[a,b]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>([a,b])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># draw a python</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-<span class="number">250</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pen.size</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment"># 创建画布和画笔</span></span><br><span class="line">screen = turtle.Screen()</span><br><span class="line">screen.bgcolor(<span class="string">&quot;lightgreen&quot;</span>)</span><br><span class="line">screen.title(<span class="string">&quot;Python Snake&quot;</span>)</span><br><span class="line">snake = turtle.Turtle()</span><br><span class="line">snake.speed(<span class="number">0</span>)</span><br><span class="line">snake.penup()</span><br><span class="line">snake.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">snake.pendown()</span><br><span class="line">snake.pensize(<span class="number">3</span>)</span><br><span class="line">snake.color(<span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制蛇身</span></span><br><span class="line">snake.begin_fill()</span><br><span class="line">snake.circle(<span class="number">50</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">25</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">50</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">25</span>, <span class="number">180</span>)</span><br><span class="line">snake.end_fill()</span><br><span class="line"><span class="comment"># 绘制蛇头</span></span><br><span class="line">snake.penup()</span><br><span class="line">snake.goto(<span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">snake.pendown()</span><br><span class="line">snake.setheading(<span class="number">45</span>)</span><br><span class="line">snake.forward(<span class="number">30</span>)</span><br><span class="line">snake.dot(<span class="number">20</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line"><span class="comment"># 隐藏画笔</span></span><br><span class="line">snake.hideturtle()</span><br><span class="line">screen.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 调整角度</span></span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 线段长度</span></span><br><span class="line">t.fd(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># 绘制圆形</span></span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没成功</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 设置初始半径</span></span><br><span class="line">radius = <span class="number">10</span></span><br><span class="line"><span class="comment"># 循环绘制9个同心圆</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    t.penup()  <span class="comment"># 抬起画笔，移动时不画线</span></span><br><span class="line">    t.seth(<span class="number">270</span>)  <span class="comment"># 设置海龟的朝向为270度（向下）</span></span><br><span class="line">    t.fd(<span class="number">10</span>)  <span class="comment"># 向下移动10像素</span></span><br><span class="line">    t.pendown()  <span class="comment"># 放下画笔，开始画线</span></span><br><span class="line">    t.circle(radius)  <span class="comment"># 绘制半径为radius的圆</span></span><br><span class="line">    radius += <span class="number">10</span>  <span class="comment"># 半径增加10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制九个同心圆</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.Screen().setup(<span class="number">600</span>,<span class="number">600</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">turtle.pensize(<span class="number">5</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;violet&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    turtle.circle(<span class="number">10</span>*i)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">0</span>,-<span class="number">10</span>*i)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 温度转换</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="number">1.8</span> * <span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1温度转换,eval的作用是去掉字符串的引号变为数字</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值：&quot;</span>)</span><br><span class="line"><span class="comment"># TempStr = eval(input(&quot;请输入带有符号的温度值：&quot;))</span></span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = <span class="built_in">int</span>((<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) - <span class="number">32</span>) / <span class="number">1.8</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的温度是&#123;&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="built_in">int</span>(<span class="number">1.8</span> * <span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) + <span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的温度是&#123;&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2人民币和美元转换</span></span><br><span class="line">Money = <span class="built_in">input</span>(<span class="string">&quot;请输入转换的金额并且带有符号:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> Money[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]:</span><br><span class="line">    Y = <span class="built_in">int</span>(<span class="built_in">eval</span>(Money[<span class="number">0</span>:-<span class="number">1</span>])/ <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的金额是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Y))</span><br><span class="line"><span class="keyword">elif</span> Money[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]:</span><br><span class="line">    D = <span class="built_in">int</span>(<span class="built_in">eval</span>(Money[<span class="number">0</span>:-<span class="number">1</span>])* <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;转换后的金额是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(D))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重量转化</span></span><br><span class="line">Weight = <span class="built_in">input</span>(<span class="string">&quot;请输入转换的重量并且带有符号:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> Weight[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;k&#x27;</span>]:</span><br><span class="line">    K = <span class="built_in">int</span>(<span class="built_in">eval</span>(Weight[<span class="number">0</span>:-<span class="number">1</span>]) / <span class="number">2.2046</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转化后的重量是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(K))</span><br><span class="line"><span class="keyword">elif</span> Weight[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]:</span><br><span class="line">    B = <span class="built_in">int</span>(<span class="built_in">eval</span>(Weight[<span class="number">0</span>:-<span class="number">1</span>]) * <span class="number">2.2046</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转化后的重量是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(B))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩色蟒蛇</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment"># 创建画布和画笔</span></span><br><span class="line">screen = turtle.Screen()</span><br><span class="line">screen.bgcolor(<span class="string">&quot;lightgreen&quot;</span>)</span><br><span class="line">screen.title(<span class="string">&quot;Python Snake&quot;</span>)</span><br><span class="line">snake = turtle.Turtle()</span><br><span class="line">snake.speed(<span class="number">0</span>)</span><br><span class="line">snake.penup()</span><br><span class="line">snake.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">snake.pendown()</span><br><span class="line">snake.pensize(<span class="number">3</span>)</span><br><span class="line">snake.color(<span class="string">&quot;darkgreen&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制蛇身</span></span><br><span class="line">snake.begin_fill()</span><br><span class="line">snake.circle(<span class="number">50</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">25</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">50</span>, <span class="number">180</span>)</span><br><span class="line">snake.circle(<span class="number">25</span>, <span class="number">180</span>)</span><br><span class="line">snake.end_fill()</span><br><span class="line"><span class="comment"># 绘制蛇头</span></span><br><span class="line">snake.penup()</span><br><span class="line">snake.goto(<span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">snake.pendown()</span><br><span class="line">snake.setheading(<span class="number">45</span>)</span><br><span class="line">snake.forward(<span class="number">30</span>)</span><br><span class="line">snake.dot(<span class="number">20</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line"><span class="comment"># 隐藏画笔</span></span><br><span class="line">snake.hideturtle()</span><br><span class="line">screen.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等边三角形</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.seth(<span class="number">240</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line">t.seth(<span class="number">120</span>)</span><br><span class="line">t.fd(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制一个正方形螺旋线</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;通过修改旋转角度控制成为螺旋曲线&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.speed(<span class="string">&quot;fastest&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    t.forward(<span class="number">2</span>*x)</span><br><span class="line">    t.left(<span class="number">88</span>)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python3</title>
    <url>/2025/03/11/python3/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the zen of python</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> this</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.Django</span></span><br><span class="line"><span class="string">2.Flask</span></span><br><span class="line"><span class="string">3.PyTorch</span></span><br><span class="line"><span class="string">4.TensorFlow</span></span><br><span class="line"><span class="string">5.Scikit_learn</span></span><br><span class="line"><span class="string">6.Pandas</span></span><br><span class="line"><span class="string">7.Requests</span></span><br><span class="line"><span class="string">8.SQLAlchemy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">自顶向下设计</span></span><br><span class="line"><span class="string">自底向上执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># #MatchAnalysis.py</span></span><br><span class="line"><span class="comment"># from random import random</span></span><br><span class="line"><span class="comment"># def printIntro():</span></span><br><span class="line"><span class="comment">#     print(&quot;这个程序模拟两个选手 A 和 B 的某种竞技比赛&quot;)</span></span><br><span class="line"><span class="comment">#     print(&quot;程序运行需要 A 和 B 的能力值 (用 0 到 1 之间的小数表示)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getInputs():</span></span><br><span class="line"><span class="comment">#     a=eval(input(&quot;请输入选手 A 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     b=eval(input(&quot;请输入选手 B 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     n=eval(input(&quot;模拟比赛的场次：&quot;))</span></span><br><span class="line"><span class="comment">#     return a, b, n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simNGames(n, probA, probB):</span></span><br><span class="line"><span class="comment">#     winsA, winsB=0,0</span></span><br><span class="line"><span class="comment">#     for i in range(n):</span></span><br><span class="line"><span class="comment">#         scoreA, scoreB=simOneGame(probA, probB)</span></span><br><span class="line"><span class="comment">#         if scoreA&gt;scoreB:</span></span><br><span class="line"><span class="comment">#             winsA += 1</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#            winsB += 1</span></span><br><span class="line"><span class="comment">#     return winsA, winsB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def gameOver(a, b):</span></span><br><span class="line"><span class="comment">#     return a==15 or b==15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simOneGame(probA, probB):</span></span><br><span class="line"><span class="comment">#     scoreA, scoreB = 0, 0</span></span><br><span class="line"><span class="comment">#     serving = &quot;A&quot;</span></span><br><span class="line"><span class="comment">#     while not gameOver(scoreA, scoreB):</span></span><br><span class="line"><span class="comment">#         if serving == &quot;A&quot;:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probA:</span></span><br><span class="line"><span class="comment">#                 scoreA += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;B&quot;</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probB:</span></span><br><span class="line"><span class="comment">#                 scoreB += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;A&quot;</span></span><br><span class="line"><span class="comment">#     return scoreA, scoreB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def printSummary(winsA, winsB):</span></span><br><span class="line"><span class="comment">#     n=winsA+winsB</span></span><br><span class="line"><span class="comment">#     print(&quot;竞技分析开始，共模拟 &#123;&#125; 场比赛 &quot;.format(n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 A 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsA, winsA/n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 B 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsB, winsB/n))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     printIntro()</span></span><br><span class="line"><span class="comment">#     probA, probB, n = getInputs()</span></span><br><span class="line"><span class="comment">#     winsA, winsB = simNGames(n, probA, probB)</span></span><br><span class="line"><span class="comment">#     printSummary(winsA, winsB)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     main()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="comment"># im = Image.open(&quot;C:\Users\86152\Pictures\screenshots\123.png&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.1</span></span><br><span class="line"><span class="comment">#MatchAnalysis.py</span></span><br><span class="line"><span class="comment"># from random import random</span></span><br><span class="line"><span class="comment"># def printIntro():</span></span><br><span class="line"><span class="comment">#     print(&quot;这个程序模拟两个选手 A 和 B 的某种竞技比赛&quot;)</span></span><br><span class="line"><span class="comment">#     print(&quot;程序运行需要 A 和 B 的能力值 (用 0 到 1 之间的小数表示)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getInputs():</span></span><br><span class="line"><span class="comment">#     a=eval(input(&quot;请输入选手 A 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     b=eval(input(&quot;请输入选手 B 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     n=eval(input(&quot;模拟比赛的场次：&quot;))</span></span><br><span class="line"><span class="comment">#     return a, b, n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simNGames(n, probA, probB):</span></span><br><span class="line"><span class="comment">#     winsA, winsB=0,0</span></span><br><span class="line"><span class="comment">#     for i in range(n):</span></span><br><span class="line"><span class="comment">#         scoreA, scoreB=simOneGame(probA, probB)</span></span><br><span class="line"><span class="comment">#         if scoreA&gt;scoreB:</span></span><br><span class="line"><span class="comment">#             winsA += 1</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#            winsB += 1</span></span><br><span class="line"><span class="comment">#     return winsA, winsB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def gameOver(a, b):</span></span><br><span class="line"><span class="comment">#     return a==11 or b==11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simOneGame(probA, probB):</span></span><br><span class="line"><span class="comment">#     scoreA, scoreB = 0, 0</span></span><br><span class="line"><span class="comment">#     serving = &quot;A&quot;</span></span><br><span class="line"><span class="comment">#     while not gameOver(scoreA, scoreB):</span></span><br><span class="line"><span class="comment">#         if serving == &quot;A&quot;:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probA:</span></span><br><span class="line"><span class="comment">#                 scoreA += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;B&quot;</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probB:</span></span><br><span class="line"><span class="comment">#                 scoreB += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;A&quot;</span></span><br><span class="line"><span class="comment">#     return scoreA, scoreB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def printSummary(winsA, winsB):</span></span><br><span class="line"><span class="comment">#     n=winsA+winsB</span></span><br><span class="line"><span class="comment">#     print(&quot;竞技分析开始，共模拟 &#123;&#125; 场比赛 &quot;.format(n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 A 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsA, winsA/n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 B 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsB, winsB/n))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     printIntro()</span></span><br><span class="line"><span class="comment">#     probA, probB, n = getInputs()</span></span><br><span class="line"><span class="comment">#     winsA, winsB = simNGames(n, probA, probB)</span></span><br><span class="line"><span class="comment">#     printSummary(winsA, winsB)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     main()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.2</span></span><br><span class="line"><span class="comment">#MatchAnalysis.py</span></span><br><span class="line"><span class="comment"># from random import random</span></span><br><span class="line"><span class="comment"># def printIntro():</span></span><br><span class="line"><span class="comment">#     print(&quot;这个程序模拟两个选手 A 和 B 的某种竞技比赛&quot;)</span></span><br><span class="line"><span class="comment">#     print(&quot;程序运行需要 A 和 B 的能力值 (用 0 到 1 之间的小数表示)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def getInputs():</span></span><br><span class="line"><span class="comment">#     a=eval(input(&quot;请输入选手 A 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     b=eval(input(&quot;请输入选手 B 的能力值 (0-1)：&quot;))</span></span><br><span class="line"><span class="comment">#     n=eval(input(&quot;模拟比赛的场次：&quot;))</span></span><br><span class="line"><span class="comment">#     return a, b, n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simNGames(n, probA, probB):</span></span><br><span class="line"><span class="comment">#     winsA, winsB=0,0</span></span><br><span class="line"><span class="comment">#     for i in range(n):</span></span><br><span class="line"><span class="comment">#         scoreA, scoreB=simOneGame(probA, probB)</span></span><br><span class="line"><span class="comment">#         if scoreA&gt;scoreB:</span></span><br><span class="line"><span class="comment">#             winsA += 1</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#            winsB += 1</span></span><br><span class="line"><span class="comment">#     return winsA, winsB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def gameOver(a, b):</span></span><br><span class="line"><span class="comment">#     return a==50 or b==50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def simOneGame(probA, probB):</span></span><br><span class="line"><span class="comment">#     scoreA, scoreB = 0, 0</span></span><br><span class="line"><span class="comment">#     serving = &quot;A&quot;</span></span><br><span class="line"><span class="comment">#     while not gameOver(scoreA, scoreB):</span></span><br><span class="line"><span class="comment">#         if serving == &quot;A&quot;:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probA:</span></span><br><span class="line"><span class="comment">#                 scoreA += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;B&quot;</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             if random() &lt; probB:</span></span><br><span class="line"><span class="comment">#                 scoreB += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 serving=&quot;A&quot;</span></span><br><span class="line"><span class="comment">#     return scoreA, scoreB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def printSummary(winsA, winsB):</span></span><br><span class="line"><span class="comment">#     n=winsA+winsB</span></span><br><span class="line"><span class="comment">#     print(&quot;竞技分析开始，共模拟 &#123;&#125; 场比赛 &quot;.format(n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 A 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsA, winsA/n))</span></span><br><span class="line"><span class="comment">#     print(&quot;选手 B 获胜 &#123;&#125; 场比赛，占比 &#123;:0.1%&#125;&quot;.format(winsB, winsB/n))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     printIntro()</span></span><br><span class="line"><span class="comment">#     probA, probB, n = getInputs()</span></span><br><span class="line"><span class="comment">#     winsA, winsB = simNGames(n, probA, probB)</span></span><br><span class="line"><span class="comment">#     printSummary(winsA, winsB)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment">#     main()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.3</span></span><br><span class="line"><span class="comment">#### 1. **下载视频/音频**</span></span><br><span class="line"><span class="keyword">import</span> you_get</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">you-get https://视频链接   #直接下载</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get -o /path/to/save https://视频链接    #指定保存路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get -i https://视频链接    #查看分辨率与格式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get --format=dash-flv720 https://www.bilibili.com/video/BV1xx411c7mu       #按格式标识下载（以B站为例）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get --itag=137 https://youtu.be/示例视频  # 137 对应 1080p YouTube 按 itag 下载</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get -l url1 url2 url3  # 直接输入多个链接  从文件读取链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get -f urls.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get --cookies=/path/to/cookies.txt https://会员视频链接 登录受限内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get --http-proxy=127.0.0.1:7890 https://需代理的链接         #HTTP/Socks5 代理：</span></span><br><span class="line"><span class="string">you-get --socks-proxy=127.0.0.1:1080 https://需代理的链接         </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">you-get -p vlc https://视频链接  # 自动调用 VLC 播放   调用本地播放器（如 VLC）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouGetDownloader</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    You-Get 视频下载器封装类</span></span><br><span class="line"><span class="string">    功能：通过 Python 调用命令行工具实现视频下载</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, output_dir: <span class="built_in">str</span> = <span class="string">&quot;./downloads&quot;</span>, proxy: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.output_dir = output_dir</span><br><span class="line">        <span class="variable language_">self</span>.proxy = proxy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_run_command</span>(<span class="params">self, command: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令行指令，返回是否成功&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用 shlex 分割命令确保安全性</span></span><br><span class="line">            args = shlex.split(command)</span><br><span class="line">            result = subprocess.run(</span><br><span class="line">                args,</span><br><span class="line">                stdout=subprocess.PIPE,</span><br><span class="line">                stderr=subprocess.PIPE,</span><br><span class="line">                text=<span class="literal">True</span>,</span><br><span class="line">                check=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;下载成功！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e.stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未知错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_single</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, </span></span><br><span class="line"><span class="params">        url: <span class="built_in">str</span>, </span></span><br><span class="line"><span class="params">        <span class="built_in">format</span>: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, </span></span><br><span class="line"><span class="params">        itag: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;下载单个视频&quot;&quot;&quot;</span></span><br><span class="line">        cmd = <span class="string">f&quot;you-get -o <span class="subst">&#123;self.output_dir&#125;</span> &quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">format</span>:</span><br><span class="line">            cmd += <span class="string">f&quot;--format=<span class="subst">&#123;<span class="built_in">format</span>&#125;</span> &quot;</span></span><br><span class="line">        <span class="keyword">elif</span> itag:</span><br><span class="line">            cmd += <span class="string">f&quot;--itag=<span class="subst">&#123;itag&#125;</span> &quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.proxy:</span><br><span class="line">            cmd += <span class="string">f&quot;--http-proxy=<span class="subst">&#123;self.proxy&#125;</span> &quot;</span></span><br><span class="line"></span><br><span class="line">        cmd += url</span><br><span class="line">        <span class="variable language_">self</span>._run_command(cmd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_batch</span>(<span class="params">self, urls: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;批量下载视频&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> idx, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(urls, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在下载第 <span class="subst">&#123;idx&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(urls)&#125;</span> 个视频...&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.download_single(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 使用示例</span></span><br><span class="line">    downloader = YouGetDownloader(</span><br><span class="line">        output_dir=<span class="string">&quot;/data/videos&quot;</span>,  <span class="comment"># 自定义保存路径</span></span><br><span class="line">        proxy=<span class="string">&quot;127.0.0.1:7890&quot;</span>      <span class="comment"># 代理设置（如无需代理设为 None）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单视频下载（支持 format/itag 指定格式）</span></span><br><span class="line">    downloader.download_single(</span><br><span class="line">        url=<span class="string">&quot;https://www.bilibili.com/video/BV1GJ411x7h7&quot;</span>,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&quot;dash-flv720&quot;</span>  <span class="comment"># 或 itag=137 针对 YouTube</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量下载</span></span><br><span class="line">    batch_urls = [</span><br><span class="line">        <span class="string">&quot;https://youtu.be/视频ID1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://www.bilibili.com/video/视频ID2&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    downloader.download_batch(batch_urls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.4</span></span><br><span class="line"><span class="comment"># 导入核心模块（基于证据1、15、19）</span></span><br><span class="line"><span class="keyword">from</span> direct.showbase.ShowBase <span class="keyword">import</span> ShowBase</span><br><span class="line"><span class="keyword">from</span> panda3d.core <span class="keyword">import</span> loadPrcFileData</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化配置（基于证据7、16）</span></span><br><span class="line">loadPrcFileData(<span class="string">&quot;&quot;</span>, <span class="string">&quot;window-title Panda3D Demo&quot;</span>)</span><br><span class="line">loadPrcFileData(<span class="string">&quot;&quot;</span>, <span class="string">&quot;fullscreen false&quot;</span>) </span><br><span class="line">loadPrcFileData(<span class="string">&quot;&quot;</span>, <span class="string">&quot;win-size 1280 720&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span>(<span class="title class_ inherited__">ShowBase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化引擎核心（证据1、15）</span></span><br><span class="line">        ShowBase.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载环境模型（证据1、15）</span></span><br><span class="line">        <span class="variable language_">self</span>.environment = <span class="variable language_">self</span>.loader.loadModel(<span class="string">&quot;models/environment&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.environment.reparentTo(<span class="variable language_">self</span>.render)</span><br><span class="line">        <span class="variable language_">self</span>.environment.setScale(<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.25</span>)</span><br><span class="line">        <span class="variable language_">self</span>.environment.setPos(-<span class="number">8</span>, <span class="number">42</span>, <span class="number">0</span>)  <span class="comment"># X右/Y后/Z上坐标系（证据16）</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载动态熊猫模型（证据1、22）</span></span><br><span class="line">        <span class="variable language_">self</span>.panda = <span class="variable language_">self</span>.loader.loadModel(<span class="string">&quot;models/panda-model&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.panda.reparentTo(<span class="variable language_">self</span>.render)</span><br><span class="line">        <span class="variable language_">self</span>.panda.setPos(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.panda.setHpr(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 设置初始朝向</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加旋转动画（证据1、19）</span></span><br><span class="line">        <span class="variable language_">self</span>.taskMgr.add(<span class="variable language_">self</span>.spinCameraTask, <span class="string">&quot;CameraRotation&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.taskMgr.add(<span class="variable language_">self</span>.pandaDance, <span class="string">&quot;PandaAnimation&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spinCameraTask</span>(<span class="params">self, task</span>):</span><br><span class="line">        <span class="comment"># 摄像机绕Y轴旋转（证据1）</span></span><br><span class="line">        angleDegrees = task.time * <span class="number">6.0</span>  <span class="comment"># 每秒6度</span></span><br><span class="line">        <span class="variable language_">self</span>.camera.setPos(<span class="number">20</span>, -<span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.camera.lookAt(<span class="variable language_">self</span>.panda)</span><br><span class="line">        <span class="keyword">return</span> task.cont</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pandaDance</span>(<span class="params">self, task</span>):</span><br><span class="line">        <span class="comment"># 熊猫周期性跳跃（证据19、22）</span></span><br><span class="line">        <span class="variable language_">self</span>.panda.setZ(<span class="built_in">abs</span>((task.time*<span class="number">2</span>) % <span class="number">4</span> - <span class="number">2</span>))  <span class="comment"># Z轴跳跃动画</span></span><br><span class="line">        <span class="variable language_">self</span>.panda.setH((task.time*<span class="number">60</span>) % <span class="number">360</span>)        <span class="comment"># Y轴旋转</span></span><br><span class="line">        <span class="keyword">return</span> task.cont</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用（证据7、15）</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = MyApp()</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.5</span></span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 1. 创建社交网络图 ==================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_social_network</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟一个包含10个用户及其好友关系的社交网络&quot;&quot;&quot;</span></span><br><span class="line">    G = nx.Graph()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加节点（用户）</span></span><br><span class="line">    users = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;Diana&quot;</span>, <span class="string">&quot;Eve&quot;</span>, </span><br><span class="line">             <span class="string">&quot;Frank&quot;</span>, <span class="string">&quot;Grace&quot;</span>, <span class="string">&quot;Henry&quot;</span>, <span class="string">&quot;Ivy&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line">    G.add_nodes_from(users)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加边（好友关系）</span></span><br><span class="line">    friendships = [</span><br><span class="line">        (<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>), (<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Charlie&quot;</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Diana&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;Eve&quot;</span>), (<span class="string">&quot;Diana&quot;</span>, <span class="string">&quot;Eve&quot;</span>), (<span class="string">&quot;Eve&quot;</span>, <span class="string">&quot;Frank&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;Frank&quot;</span>, <span class="string">&quot;Grace&quot;</span>), (<span class="string">&quot;Grace&quot;</span>, <span class="string">&quot;Henry&quot;</span>), (<span class="string">&quot;Henry&quot;</span>, <span class="string">&quot;Ivy&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;Ivy&quot;</span>, <span class="string">&quot;Jack&quot;</span>), (<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Eve&quot;</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Frank&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">    G.add_edges_from(friendships)</span><br><span class="line">    <span class="keyword">return</span> G</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 2. 分析网络属性 ==================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_network</span>(<span class="params">G</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算中心性指标和关键路径&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 度中心性（最活跃的用户）</span></span><br><span class="line">    degree_centrality = nx.degree_centrality(G)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 介数中心性（信息枢纽用户）</span></span><br><span class="line">    betweenness_centrality = nx.betweenness_centrality(G)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找最短路径（Alice到Jack的最短联系链）</span></span><br><span class="line">    shortest_path = nx.shortest_path(G, source=<span class="string">&quot;Alice&quot;</span>, target=<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;degree_top&quot;</span>: <span class="built_in">max</span>(degree_centrality, key=degree_centrality.get),</span><br><span class="line">        <span class="string">&quot;betweenness_top&quot;</span>: <span class="built_in">max</span>(betweenness_centrality, key=betweenness_centrality.get),</span><br><span class="line">        <span class="string">&quot;shortest_path&quot;</span>: shortest_path</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 3. 可视化网络 ==================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_network</span>(<span class="params">G, highlight_nodes=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制网络图并高亮关键节点&quot;&quot;&quot;</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 布局算法</span></span><br><span class="line">    pos = nx.spring_layout(G, seed=<span class="number">42</span>)  <span class="comment"># 固定布局随机种子</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制普通节点</span></span><br><span class="line">    nx.draw_networkx_nodes(G, pos, node_size=<span class="number">500</span>, node_color=<span class="string">&quot;skyblue&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 高亮关键节点（如中心性最高的用户）</span></span><br><span class="line">    <span class="keyword">if</span> highlight_nodes:</span><br><span class="line">        nx.draw_networkx_nodes(G, pos, nodelist=highlight_nodes, </span><br><span class="line">                               node_size=<span class="number">700</span>, node_color=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制边和标签</span></span><br><span class="line">    nx.draw_networkx_edges(G, pos, alpha=<span class="number">0.5</span>)</span><br><span class="line">    nx.draw_networkx_labels(G, pos, font_size=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    plt.title(<span class="string">&quot;Social Network Analysis&quot;</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 4. 社区检测 ==================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_communities</span>(<span class="params">G</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用Girvan-Newman算法划分社区&quot;&quot;&quot;</span></span><br><span class="line">    communities_generator = nx.community.girvan_newman(G)</span><br><span class="line">    top_communities = <span class="built_in">next</span>(communities_generator)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">sorted</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> top_communities)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 主程序 ==================</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建网络</span></span><br><span class="line">    G = create_social_network()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分析网络</span></span><br><span class="line">    results = analyze_network(G)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最活跃用户: <span class="subst">&#123;results[<span class="string">&#x27;degree_top&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;信息枢纽用户: <span class="subst">&#123;results[<span class="string">&#x27;betweenness_top&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Alice到Jack的最短路径: <span class="subst">&#123;<span class="string">&#x27; -&gt; &#x27;</span>.join(results[<span class="string">&#x27;shortest_path&#x27;</span>])&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可视化（高亮度中心性最高的节点）</span></span><br><span class="line">    visualize_network(G, highlight_nodes=[results[<span class="string">&#x27;degree_top&#x27;</span>], results[<span class="string">&#x27;betweenness_top&#x27;</span>]])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 社区划分结果</span></span><br><span class="line">    communities = detect_communities(G)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n社区划分结果:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, comm <span class="keyword">in</span> <span class="built_in">enumerate</span>(communities, <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;社区<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(comm)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.7</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">definite a class</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">构造函数</span></span><br><span class="line"><span class="string">1.definit a class</span></span><br><span class="line"><span class="string">2.definit a function must to be def __init__(self, *)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoName</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">dm = DemoName(<span class="string">&#x27;xiao&#x27;</span>)</span><br><span class="line">dm2 = DemoName(<span class="string">&#x27;hu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        DemoClass.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">dc1 = DemoClass(<span class="string">&#x27;xiao&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">dc2 = DemoClass(<span class="string">&#x27;xu&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(DemoClass.count)</span><br><span class="line"><span class="built_in">print</span>(dc1.name,dc2.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">类方法</span></span><br><span class="line"><span class="string">1.need @classmethod</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        DemoClass.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getChrCount</span>(<span class="params">cls</span>):</span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        idx = cls.count <span class="keyword">if</span> cls.count&lt;<span class="number">10</span> <span class="keyword">else</span> <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> s[idx]</span><br><span class="line"></span><br><span class="line">dc1 = DemoClass(<span class="string">&#x27;xiao&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">dc2 = DemoClass(<span class="string">&#x27;xu&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(DemoClass.count)</span><br><span class="line"><span class="built_in">print</span>(dc1.name,dc2.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">实例方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lucky</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.name:</span><br><span class="line">            s += <span class="built_in">ord</span>(c) % <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">dc1 = DemoClass(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">dc2 = DemoClass(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc1.name)</span><br><span class="line"><span class="built_in">print</span>(dc2.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">保留方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.name)</span><br><span class="line">    </span><br><span class="line">dc1 = DemoClass(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">dc2 = DemoClass(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc1.name)</span><br><span class="line"><span class="built_in">print</span>(dc2.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">析构函数</span></span><br><span class="line"><span class="string">1.use __del__(self)</span></span><br><span class="line"><span class="string">作用是删除函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;goobye&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dc1 = DemoClass(<span class="string">&#x27;xiao&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> dc1</span><br><span class="line"><span class="built_in">print</span>(dc1.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">library system</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#LibraryManageSystem.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, idx, title, author</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">id</span> = idx</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.author = author</span><br><span class="line">        <span class="variable language_">self</span>.is_borrowed = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">borrow</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_borrowed:</span><br><span class="line">            <span class="variable language_">self</span>.is_borrowed = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">return_book</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_borrowed:</span><br><span class="line">            <span class="variable language_">self</span>.is_borrowed = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;可借阅 &quot;</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_borrowed <span class="keyword">else</span> <span class="string">&quot;已借阅 &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Library</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.books = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">self, book</span>):</span><br><span class="line">        <span class="variable language_">self</span>.books[book.<span class="built_in">id</span>] = book</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">borrow_book</span>(<span class="params">self, book_id</span>):</span><br><span class="line">        <span class="keyword">if</span> book_id <span class="keyword">in</span> <span class="variable language_">self</span>.books <span class="keyword">and</span> <span class="variable language_">self</span>.books[book_id].borrow():</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;图书 &#123;&#125; 借阅成功 &quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.books[book_id].title))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;图书 &#123;&#125; 无法借阅 &quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.books[book_id].title))</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">return_book</span>(<span class="params">self, book_id</span>):</span><br><span class="line">        <span class="keyword">if</span> book_id <span class="keyword">in</span> <span class="variable language_">self</span>.books <span class="keyword">and</span> <span class="variable language_">self</span>.books[book_id].return_book():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;图书 &#123;&#125; 归还成功 &quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.books[book_id].title))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;图书归还出错 &quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_books</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> <span class="variable language_">self</span>.books.values():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ID:&#123;:4&#125;, 书名 :&#123;:20&#125;, 作者 :&#123;:15&#125;, 状态 :&#123;:10&#125;&quot;</span>\</span><br><span class="line">                  .<span class="built_in">format</span>(book.<span class="built_in">id</span>, book.title, book.author, book.status()))</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">继承</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        DemoClass.count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HumanNameClass</span>(<span class="title class_ inherited__">DemoClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(DemoClass.count) + <span class="variable language_">self</span>.name + <span class="string">&#x27;sb&#x27;</span></span><br><span class="line">    </span><br><span class="line">dc1 = HumanNameClass(<span class="string">&quot;xiao&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc1.getName())</span><br><span class="line"><span class="built_in">print</span>(dc1.printName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">重载</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        DemoClass.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HumanNameClass</span>(<span class="title class_ inherited__">DemoClass</span>):</span><br><span class="line">    count = <span class="number">99</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        HumanNameClass.count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(HumanNameClass.count) + <span class="variable language_">self</span>.name </span><br><span class="line">    </span><br><span class="line">dc1 = HumanNameClass(<span class="string">&quot;xiao&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc1.printCount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">图像的四则运算</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#ImageOperations.py</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageObject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span> (<span class="variable language_">self</span>, path = <span class="string">&quot;&quot;</span>):</span><br><span class="line">        <span class="variable language_">self</span>.path = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.data = np.array(Image.<span class="built_in">open</span>(path))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="variable language_">self</span>.data = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span> (<span class="variable language_">self</span>, other):</span><br><span class="line">        image = ImageObject()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image.data = np.mod(<span class="variable language_">self</span>.data + other.data, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            image.data = <span class="variable language_">self</span>.data</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span> (<span class="variable language_">self</span>, other):</span><br><span class="line">        image = ImageObject()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image.data = np.mod(<span class="variable language_">self</span>.data - other.data, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            image.data = <span class="variable language_">self</span>.data</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span> (<span class="variable language_">self</span>, factor):</span><br><span class="line">        image = ImageObject()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image.data = np.mod(<span class="variable language_">self</span>.data * factor, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            image.data = <span class="variable language_">self</span>.data</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span> (<span class="variable language_">self</span>, factor):</span><br><span class="line">        image = ImageObject()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image.data = np.mod(<span class="variable language_">self</span>.data // factor, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            image.data = <span class="variable language_">self</span>.data</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveImage</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            im = Image.fromarray(<span class="variable language_">self</span>.data)</span><br><span class="line">            im.save(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import module</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Demo_10</span><br><span class="line">Demo_10.parse_sitemap()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">程序包包装，每个程序包必须包含一个 __init_-.py 文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import requests</span></span><br><span class="line"><span class="string">r = requests.get(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="string">type(r)      # &lt;class &#x27;requests.models.Response&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import requests</span></span><br><span class="line"><span class="string">r = requests.get(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="string">r.status_code</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.text</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.encoding</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.text</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">标准获取网页内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态不是 200, 引发异常</span></span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span> <span class="comment"># 无论原来用什么编码 , 都改成 utf-8</span></span><br><span class="line">        <span class="keyword">return</span> r.text </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(getHTMLText(url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">换行获取文本</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加说明文字并强制换行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[文本长度]&quot;</span>, <span class="built_in">len</span>(r.text), <span class="string">&quot;\n&quot;</span>)      <span class="comment"># \n 表示换行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[内容长度]&quot;</span>, <span class="built_in">len</span>(r.content), <span class="string">&quot;\n&quot;</span>)   <span class="comment"># 结尾额外空行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[文本]&quot;</span>, r.text, <span class="string">&quot;\n&quot;</span>)   <span class="comment"># 结尾额外空行</span></span><br><span class="line">        <span class="keyword">return</span> r.text </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误信息：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;==== 开始获取 ====&quot;</span>)</span><br><span class="line">getHTMLText(url)  <span class="comment"># 直接调用函数，无需再print（因为函数内已输出）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;==== 获取完成 ====&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.Send a request</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://www.baidu.com/post&#x27;</span>,data=&#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">r = requests.put(<span class="string">&#x27;http://www.baidu.com/put&#x27;</span>,data=&#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">r = requests.delete(<span class="string">&#x27;http://www.baidu.com/delete&#x27;</span>)</span><br><span class="line">r = requests.head(<span class="string">&#x27;http://www.baidu.com/head&#x27;</span>)</span><br><span class="line">r = requests.options(<span class="string">&#x27;http://www.baidu.com/options&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.convey URL the parameters</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>]&#125;          <span class="comment">#use list to params</span></span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, params=payload)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.Respond to content</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>)</span><br><span class="line">r.text         <span class="comment"># r.encoding = &#x27;ISO-8859-1&#x27; use to change the encode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">payload = ((<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>))</span><br><span class="line">r = requests.post(url,data=payload)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, data=json.dumps(payload)) <span class="keyword">or</span>  r = requests.post(url, json=payload)</span><br><span class="line"><span class="comment"># allow_redirects, use to prohibit redirect</span></span><br><span class="line">r.status_code == requests.codes.ok</span><br><span class="line">r.history</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/sessioncookie/123456789&#x27;</span>)</span><br><span class="line">r = s.get(<span class="string">&quot;http://httpbin.org/cookies&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">to convey the cookies to the session</span></span><br><span class="line"><span class="string">error and mistake</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s = requests.session(<span class="string">&#x27;http://www.baidu.com/cookies/set/sessioncookie/123456&#x27;</span>)</span><br><span class="line">r = s.get(<span class="string">&#x27;http://www.baidu.com/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()  <span class="comment"># 正确初始化Session</span></span><br><span class="line">s.get(<span class="string">&quot;http://httpbin.org/cookies/set/sessioncookie/123456&quot;</span>)  <span class="comment"># 设置Cookie</span></span><br><span class="line">r = s.get(<span class="string">&quot;http://httpbin.org/cookies&quot;</span>)  <span class="comment"># 获取Cookie</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a session</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert a cookies into http</span></span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>, cookies=&#123;<span class="string">&#x27;from-my&#x27;</span>: <span class="string">&#x27;browser&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># &#x27;&#123;&quot;cookies&quot;: &#123;&quot;from-my&quot;: &quot;browser&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># &#x27;&#123;&quot;cookies&quot;: &#123;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s = Session()</span><br><span class="line">req = Request(<span class="string">&#x27;GET&#x27;</span>, url,</span><br><span class="line">    data=<span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">    headers=<span class="string">&#x27;header&#x27;</span></span><br><span class="line">)</span><br><span class="line">prepped = s.prepare_request(req)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do something with prepped.body</span></span><br><span class="line"><span class="comment"># do something with prepped.headers</span></span><br><span class="line"></span><br><span class="line">resp = s.send(prepped,</span><br><span class="line">    stream=<span class="string">&#x27;stream&#x27;</span>,</span><br><span class="line">    verify=<span class="string">&#x27;verify&#x27;</span>,</span><br><span class="line">    proxies=<span class="string">&#x27;proxies&#x27;</span>,</span><br><span class="line">    cert=<span class="string">&#x27;cert&#x27;</span>,</span><br><span class="line">    timeout=<span class="string">&#x27;timeout&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#AutoKeywordSearch.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">hd_str = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span> + \</span><br><span class="line">    <span class="string">&quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0&quot;</span> + \</span><br><span class="line">    <span class="string">&quot;Safari/537.36 Edg/122.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKeywordResult</span>(<span class="params">keyword</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span> + keyword</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get (url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:hd_str&#125;,\</span><br><span class="line">                          timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parserLinks</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27; data-tools&#x27;</span>: \</span><br><span class="line">                                     re.<span class="built_in">compile</span>(<span class="string">&#x27;title&#x27;</span>)&#125;):</span><br><span class="line">        data = div.attrs[<span class="string">&#x27;data-tools&#x27;</span>] <span class="comment"># 获得属性值</span></span><br><span class="line">        d = json.loads(data.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>)) <span class="comment"># 将属性值转换成字典</span></span><br><span class="line">        links.append(d[<span class="string">&#x27;title&#x27;</span>]) <span class="comment"># 将链接的题目返回</span></span><br><span class="line">    <span class="keyword">return</span> links</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    html = getKeywordResult(<span class="string">&#x27;新质生产力&#x27;</span>)</span><br><span class="line">    ls = parserLinks(html)</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[&#123;:^3&#125;]&#123;&#125;&quot;</span>.<span class="built_in">format</span>(count, i))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#alter the error code </span></span><br><span class="line"><span class="keyword">import</span> requests          <span class="comment"># 用于发送HTTP请求获取网页内容</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 用于解析HTML文档</span></span><br><span class="line"><span class="keyword">import</span> re                <span class="comment"># 正则表达式库，用于模式匹配</span></span><br><span class="line"><span class="keyword">import</span> json              <span class="comment"># 用于处理JSON格式数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hd_str = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span> + \</span><br><span class="line">    <span class="string">&quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0&quot;</span> + \</span><br><span class="line">    <span class="string">&quot;Safari/537.36 Edg/122.0.0.0&quot;</span>  <span class="comment"># 模拟浏览器请求头，绕过反爬机制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKeywordResult</span>(<span class="params">keyword</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span> + keyword  <span class="comment"># 构造百度搜索URL（修正后的正确地址）</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送GET请求</span></span><br><span class="line">        r = requests.get(url, </span><br><span class="line">                       headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:hd_str&#125;,  <span class="comment"># 设置请求头</span></span><br><span class="line">                       timeout=<span class="number">30</span>)        <span class="comment"># 超时设为30秒</span></span><br><span class="line">        r.raise_for_status()  <span class="comment"># 检查HTTP状态码，4xx/5xx会抛出异常</span></span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span>  <span class="comment"># 强制设置编码为UTF-8</span></span><br><span class="line">        <span class="keyword">return</span> r.text         <span class="comment"># 返回网页HTML内容</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>             <span class="comment"># 异常时返回空字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parserLinks</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 创建BeautifulSoup解析对象</span></span><br><span class="line">    links = []</span><br><span class="line">    <span class="comment"># 查找包含data-tools属性的div元素，且属性值包含&quot;title&quot;</span></span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;data-tools&#x27;</span>: re.<span class="built_in">compile</span>(<span class="string">&#x27;title&#x27;</span>)&#125;):</span><br><span class="line">        data = div.attrs[<span class="string">&#x27;data-tools&#x27;</span>]   <span class="comment"># 获取data-tools属性值（原始JSON字符串）</span></span><br><span class="line">        d = json.loads(data.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>))  <span class="comment"># 转换单引号为双引号后解析为字典</span></span><br><span class="line">        links.append(d[<span class="string">&#x27;title&#x27;</span>])         <span class="comment"># 提取标题加入结果列表</span></span><br><span class="line">    <span class="keyword">return</span> links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    html = getKeywordResult(<span class="string">&#x27;新质生产力&#x27;</span>)  <span class="comment"># 获取搜索结果的HTML</span></span><br><span class="line">    ls = parserLinks(html)              <span class="comment"># 解析出标题列表</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ls:                        <span class="comment"># 格式化输出结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[&#123;:^3&#125;]&#123;&#125;&quot;</span>.<span class="built_in">format</span>(count, i))  <span class="comment"># 居中对齐的序号</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()  <span class="comment"># 启动程序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">soup = BeautifulSoup(r.text)</span><br><span class="line"><span class="built_in">type</span>(soup)</span><br><span class="line">soup.head</span><br><span class="line">title = soup.title</span><br><span class="line"><span class="built_in">type</span>(title)</span><br><span class="line">soup.p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后版本</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># bs4主要用来返回html标签内容</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要添加请求头（重要！）</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议添加异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 发送带请求头的GET请求</span></span><br><span class="line">    r = requests.get(url, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">    r.raise_for_status()  <span class="comment"># 自动检查HTTP状态码（重要！）</span></span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span>  <span class="comment"># 设置编码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 必须指定HTML解析器（关键修正）</span></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&#x27;html.parser&#x27;</span>)  <span class="comment"># 这里添加了第二个参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后续操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(soup))          <span class="comment"># 应该输出：&lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(soup.head)           <span class="comment"># 显示&lt;head&gt;标签内容</span></span><br><span class="line">    title = soup.title</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(title))         <span class="comment"># 应该输出：&lt;class &#x27;bs4.element.Tag&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(soup.p)              <span class="comment"># 输出第一个&lt;p&gt;标签</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;请求错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;其他错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#CrawUnivRanking.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line">allUniv = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillUnivList</span>(<span class="params">soup</span>):</span><br><span class="line">    data = soup.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> data:</span><br><span class="line">        singleUniv = []</span><br><span class="line">        ltd = tr.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ltd)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        singleUniv.append(ltd[<span class="number">0</span>].string.strip(<span class="string">&quot;\n &quot;</span>))</span><br><span class="line">        singleUniv.append(<span class="built_in">list</span>(ltd[<span class="number">1</span>].strings)[<span class="number">1</span>].strip(<span class="string">&quot;\n &quot;</span>))</span><br><span class="line">        singleUniv.append(<span class="built_in">list</span>(ltd[<span class="number">2</span>].strings)[<span class="number">0</span>].strip(<span class="string">&quot;\n &quot;</span>))</span><br><span class="line">        singleUniv.append(<span class="built_in">list</span>(ltd[<span class="number">3</span>].strings)[<span class="number">0</span>].strip(<span class="string">&quot;\n &quot;</span>))</span><br><span class="line">        singleUniv.append(ltd[<span class="number">4</span>].string.strip(<span class="string">&quot;\n &quot;</span>))</span><br><span class="line">        allUniv.append(singleUniv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printUnivList</span>(<span class="params">num</span>):</span><br><span class="line">    tb = PrettyTable();</span><br><span class="line">    tb.field_names = [<span class="string">&quot; 排名 &quot;</span>,<span class="string">&quot; 学校名称 &quot;</span>,<span class="string">&quot; 省市 &quot;</span>,<span class="string">&quot; 类型 &quot;</span>,<span class="string">&quot; 总分 &quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        tb.add_row(allUniv[i])</span><br><span class="line">    <span class="built_in">print</span>(tb)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">num</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.shanghairanking.cn/rankings/bcur/2023&#x27;</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    fillUnivList(soup)</span><br><span class="line">    printUnivList(num)</span><br><span class="line"> </span><br><span class="line">main(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">example</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.1 Robots协议爬虫。编写爬取robots.txt文件的爬虫，并分析所爬取的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobotsAnalyzer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_url</span>):</span><br><span class="line">        <span class="variable language_">self</span>.base_url = base_url</span><br><span class="line">        <span class="variable language_">self</span>.robots_url = <span class="string">f&quot;<span class="subst">&#123;urlparse(base_url).scheme&#125;</span>://<span class="subst">&#123;urlparse(base_url).netloc&#125;</span>/robots.txt&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.rp = RobotFileParser()</span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (兼容性研究机器人; +http://yourdomain.com/bot-info)&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch_robots</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取并解析robots.txt&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = requests.get(<span class="variable language_">self</span>.robots_url, headers=<span class="variable language_">self</span>.headers, timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="variable language_">self</span>.rp.parse(resp.text.splitlines())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> resp.status_code == <span class="number">404</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[INFO] <span class="subst">&#123;self.base_url&#125;</span> 未设置robots.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 视为无限制</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[WARN] 异常状态码: <span class="subst">&#123;resp.status_code&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[ERROR] 获取失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analyze_rules</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;深度规则分析&quot;&quot;&quot;</span></span><br><span class="line">        analysis = &#123;</span><br><span class="line">            <span class="string">&#x27;user_agents&#x27;</span>: <span class="built_in">set</span>(),</span><br><span class="line">            <span class="string">&#x27;disallow_rules&#x27;</span>: [],</span><br><span class="line">            <span class="string">&#x27;allow_rules&#x27;</span>: [],</span><br><span class="line">            <span class="string">&#x27;crawl_delay&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;sitemaps&#x27;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 解析标准字段</span></span><br><span class="line">        <span class="keyword">for</span> entry <span class="keyword">in</span> <span class="variable language_">self</span>.rp.entries:</span><br><span class="line">            analysis[<span class="string">&#x27;user_agents&#x27;</span>].update(entry.useragents)</span><br><span class="line">            analysis[<span class="string">&#x27;disallow_rules&#x27;</span>].extend(entry.rulelines)</span><br><span class="line">            <span class="keyword">if</span> entry.delay:</span><br><span class="line">                analysis[<span class="string">&#x27;crawl_delay&#x27;</span>] = entry.delay</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取扩展字段</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.rp.sitemaps:</span><br><span class="line">            analysis[<span class="string">&#x27;sitemaps&#x27;</span>] = <span class="variable language_">self</span>.rp.sitemaps</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 路径统计</span></span><br><span class="line">        disallow_count = <span class="built_in">len</span>([r <span class="keyword">for</span> r <span class="keyword">in</span> analysis[<span class="string">&#x27;disallow_rules&#x27;</span>] <span class="keyword">if</span> r.allowance==<span class="literal">False</span>])</span><br><span class="line">        allow_count = <span class="built_in">len</span>([r <span class="keyword">for</span> r <span class="keyword">in</span> analysis[<span class="string">&#x27;disallow_rules&#x27;</span>] <span class="keyword">if</span> r.allowance==<span class="literal">True</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            **analysis,</span><br><span class="line">            <span class="string">&#x27;disallow_count&#x27;</span>: disallow_count,</span><br><span class="line">            <span class="string">&#x27;allow_count&#x27;</span>: allow_count</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_url = <span class="string">&quot;https://www.example.com&quot;</span></span><br><span class="line">    analyzer = RobotsAnalyzer(target_url)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> analyzer.fetch_robots():</span><br><span class="line">        report = analyzer.analyze_rules()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发现<span class="subst">&#123;<span class="built_in">len</span>(report[<span class="string">&#x27;user_agents&#x27;</span>])&#125;</span>种User-Agent规则&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;禁止路径数量: <span class="subst">&#123;report[<span class="string">&#x27;disallow_count&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;推荐抓取间隔: <span class="subst">&#123;report[<span class="string">&#x27;crawl_delay&#x27;</span>] <span class="keyword">or</span> <span class="string">&#x27;未指定&#x27;</span>&#125;</span>秒&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> report[<span class="string">&#x27;sitemaps&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;网站地图: <span class="subst">&#123;report[<span class="string">&#x27;sitemaps&#x27;</span>][<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">easz crawler</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/robots.txt&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">complicated crawler</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_robots_txt</span>(<span class="params">url</span>):</span><br><span class="line">       robots_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/robots.txt&quot;</span></span><br><span class="line">       response = requests.get(robots_url)</span><br><span class="line">       <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">           <span class="keyword">return</span> response.text</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 文件不存在或无法访问 [[17]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_robots_txt</span>(<span class="params">robots_content, target_url</span>):</span><br><span class="line">        rp = RobotFileParser()</span><br><span class="line">        rp.parse(robots_content.split(<span class="string">&#x27;\n&#x27;</span>))  <span class="comment"># 解析文本内容 [[3]]</span></span><br><span class="line">        <span class="keyword">return</span> rp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">target_url</span>):</span><br><span class="line">    <span class="comment"># 1. 爬取 robots.txt</span></span><br><span class="line">    robots_text = fetch_robots_txt(target_url)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> robots_text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到 robots.txt，默认允许抓取全站&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 解析内容</span></span><br><span class="line">    rp = RobotFileParser()</span><br><span class="line">    rp.parse(robots_text.splitlines())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 分析规则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;允许抓取的路径示例：&quot;</span>)</span><br><span class="line">    test_urls = [<span class="string">&quot;/public/data&quot;</span>, <span class="string">&quot;/private/admin&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> test_urls:</span><br><span class="line">        full_url = <span class="string">f&quot;<span class="subst">&#123;target_url&#125;</span><span class="subst">&#123;url&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> rp.can_fetch(<span class="string">&quot;*&quot;</span>, full_url):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;允许访问: <span class="subst">&#123;full_url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;禁止访问: <span class="subst">&#123;full_url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 输出 Sitemap 信息</span></span><br><span class="line">    <span class="keyword">if</span> rp.sitemaps:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n网站地图地址：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> sitemap <span class="keyword">in</span> rp.sitemaps:</span><br><span class="line">            <span class="built_in">print</span>(sitemap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(<span class="string">&quot;https://www.example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.2 Robots 遵循爬虫。扩展程序练习题10.1，根据robots.txt文件内容爬取网站，实现 Robots遵循爬虫。</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_robots_txt</span>(<span class="params">base_url</span>):</span><br><span class="line">    parsed = urlparse(base_url)</span><br><span class="line">    robots_url = <span class="string">f&quot;<span class="subst">&#123;parsed.scheme&#125;</span>://<span class="subst">&#123;parsed.netloc&#125;</span>/robots.txt&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(robots_url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;MyBot/1.0&#x27;</span>&#125;, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">elif</span> response.status_code == <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无限制规则</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">300</span> &lt;= response.status_code &lt; <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> handle_redirect(response.headers[<span class="string">&#x27;Location&#x27;</span>])  <span class="comment"># 处理重定向[[2]][[6]]</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">f&quot;HTTP Error: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Failed to fetch robots.txt: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExtendedRobotParser</span>(<span class="title class_ inherited__">RobotFileParser</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.crawl_delay = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.sitemaps = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, lines</span>):</span><br><span class="line">        current_user_agents = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line <span class="keyword">or</span> line.startswith(<span class="string">&#x27;##&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 跳过注释[[6]][[10]]</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解析User-agent</span></span><br><span class="line">            <span class="keyword">if</span> line.lower().startswith(<span class="string">&#x27;user-agent&#x27;</span>):</span><br><span class="line">                _, value = line.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                current_user_agents = [ua.strip() <span class="keyword">for</span> ua <span class="keyword">in</span> value.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解析Crawl-delay</span></span><br><span class="line">            <span class="keyword">elif</span> line.lower().startswith(<span class="string">&#x27;crawl-delay&#x27;</span>):</span><br><span class="line">                _, delay = line.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;MyBot&#x27;</span> <span class="keyword">in</span> current_user_agents <span class="keyword">or</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> current_user_agents:</span><br><span class="line">                    <span class="variable language_">self</span>.crawl_delay = <span class="built_in">float</span>(delay.strip())</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解析Sitemap</span></span><br><span class="line">            <span class="keyword">elif</span> line.lower().startswith(<span class="string">&#x27;sitemap&#x27;</span>):</span><br><span class="line">                _, sitemap_url = line.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                <span class="variable language_">self</span>.sitemaps.append(sitemap_url.strip())</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 处理Allow/Disallow</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">super</span>().parse([line])  <span class="comment"># 复用父类方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_allowed</span>(<span class="params">parser, url, user_agent=<span class="string">&#x27;MyBot&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> parser.can_fetch(user_agent, url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawlerScheduler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.domain_delays = &#123;&#125;  <span class="comment"># &#123;domain: (delay, last_request_time)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait_if_needed</span>(<span class="params">self, domain</span>):</span><br><span class="line">        <span class="keyword">if</span> domain <span class="keyword">in</span> <span class="variable language_">self</span>.domain_delays:</span><br><span class="line">            delay, last_time = <span class="variable language_">self</span>.domain_delays[domain]</span><br><span class="line">            elapsed = time() - last_time</span><br><span class="line">            <span class="keyword">if</span> elapsed &lt; delay:</span><br><span class="line">                sleep(delay - elapsed)</span><br><span class="line">        <span class="variable language_">self</span>.domain_delays[domain] = (parser.crawl_delay, time())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_sitemap</span>(<span class="params">sitemap_url</span>):</span><br><span class="line">    response = requests.get(sitemap_url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;xml&#x27;</span>)</span><br><span class="line">        urls = [loc.text <span class="keyword">for</span> loc <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;loc&#x27;</span>)]</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobotsCompliantCrawler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, user_agent=<span class="string">&#x27;MyBot/1.0&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.user_agent = user_agent</span><br><span class="line">        <span class="variable language_">self</span>.parsers = &#123;&#125;  <span class="comment"># &#123;domain: ExtendedRobotParser&#125;</span></span><br><span class="line">        <span class="variable language_">self</span>.scheduler = CrawlerScheduler()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self, start_url</span>):</span><br><span class="line">        parsed = urlparse(start_url)</span><br><span class="line">        domain = parsed.netloc</span><br><span class="line">        robots_txt = <span class="variable language_">self</span>.fetch_robots_txt(start_url)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化解析器</span></span><br><span class="line">        parser = ExtendedRobotParser()</span><br><span class="line">        <span class="keyword">if</span> robots_txt:</span><br><span class="line">            parser.parse(robots_txt.splitlines())</span><br><span class="line">        <span class="variable language_">self</span>.parsers[domain] = parser</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 优先抓取Sitemap中的URL</span></span><br><span class="line">        <span class="keyword">if</span> parser.sitemaps:</span><br><span class="line">            <span class="keyword">for</span> sitemap <span class="keyword">in</span> parser.sitemaps:</span><br><span class="line">                urls = parse_sitemap(sitemap)</span><br><span class="line">                <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                    <span class="keyword">if</span> parser.can_fetch(<span class="variable language_">self</span>.user_agent, url):</span><br><span class="line">                        <span class="variable language_">self</span>.process_page(url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 常规爬取逻辑（示例）</span></span><br><span class="line">        <span class="variable language_">self</span>.process_page(start_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_page</span>(<span class="params">self, url</span>):</span><br><span class="line">        parsed = urlparse(url)</span><br><span class="line">        domain = parsed.netloc</span><br><span class="line">        parser = <span class="variable language_">self</span>.parsers.get(domain)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查是否允许访问</span></span><br><span class="line">        <span class="keyword">if</span> parser <span class="keyword">and</span> <span class="keyword">not</span> parser.can_fetch(<span class="variable language_">self</span>.user_agent, url):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Blocked by robots.txt: <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 控制爬取频率</span></span><br><span class="line">        <span class="variable language_">self</span>.scheduler.wait_if_needed(domain)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 执行实际抓取</span></span><br><span class="line">        response = requests.get(url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="variable language_">self</span>.user_agent&#125;)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Successfully crawled: <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 解析页面并提取新链接（此处省略具体实现）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.3图像网站爬虫。请选取一个图像网站，编写爬虫，下载其中所有的图像。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">can not understand</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, save_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, stream=<span class="literal">True</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(<span class="number">1024</span>):</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;下载成功: <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载失败: <span class="subst">&#123;url&#125;</span> - <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unsplash_crawler</span>(<span class="params">keyword, max_images=<span class="number">50</span></span>):</span><br><span class="line">    base_url = <span class="string">f&quot;https://unsplash.com/s/photos/<span class="subst">&#123;keyword&#125;</span>&quot;</span></span><br><span class="line">    response = requests.get(base_url, headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    img_tags = soup.find_all(<span class="string">&#x27;img&#x27;</span>, &#123;<span class="string">&#x27;data-test&#x27;</span>: <span class="string">&#x27;photo-grid-masonry-img&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    save_dir = <span class="string">f&quot;unsplash_<span class="subst">&#123;keyword&#125;</span>&quot;</span></span><br><span class="line">    os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> img_tags:</span><br><span class="line">        <span class="keyword">if</span> count &gt;= max_images:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        img_url = img.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> img_url <span class="keyword">and</span> <span class="string">&#x27;images.unsplash.com/photo-&#x27;</span> <span class="keyword">in</span> img_url:</span><br><span class="line">            <span class="comment"># 获取高清大图（移除尺寸参数）</span></span><br><span class="line">            img_url = img_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            filename = os.path.join(save_dir, <span class="string">f&quot;unsplash_<span class="subst">&#123;count&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            download_image(img_url, filename)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)  <span class="comment"># 控制请求频率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unsplash_crawler(<span class="string">&quot;cat&quot;</span>, max_images=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">complete code</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, save_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, stream=<span class="literal">True</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(<span class="number">1024</span>):</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;下载成功: <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载失败: <span class="subst">&#123;url&#125;</span> - <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image_urls</span>(<span class="params">keyword, pages=<span class="number">3</span></span>):</span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&quot;https://unsplash.com/s/photos/<span class="subst">&#123;keyword&#125;</span>?page=<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">        response = requests.get(url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;)</span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        imgs = soup.find_all(<span class="string">&#x27;img&#x27;</span>, &#123;<span class="string">&#x27;data-test&#x27;</span>: <span class="string">&#x27;photo-grid-masonry-img&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            img_url = img.get(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> img_url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                urls.append(img_url)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    keyword = <span class="string">&quot;cat&quot;</span></span><br><span class="line">    save_dir = <span class="string">f&quot;unsplash_<span class="subst">&#123;keyword&#125;</span>&quot;</span></span><br><span class="line">    os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    image_urls = get_image_urls(keyword, pages=<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;找到 <span class="subst">&#123;<span class="built_in">len</span>(image_urls)&#125;</span> 张图片&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> idx, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            filename = os.path.join(save_dir, <span class="string">f&quot;image_<span class="subst">&#123;idx&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            executor.submit(download_image, url, filename)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.4百度图片爬虫。分析百度图片搜索返回结果的HTML代码，编写爬虫抓取图片并下载形成专题图片库。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu_image_crawler</span>(<span class="params">keyword, max_pages=<span class="number">3</span>, save_dir=<span class="string">&quot;images&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    百度图片爬虫核心函数</span></span><br><span class="line"><span class="string">    :param keyword: 搜索关键词（支持中文）</span></span><br><span class="line"><span class="string">    :param max_pages: 最大爬取页数（每页30张）</span></span><br><span class="line"><span class="string">    :param save_dir: 图片存储目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建存储目录</span></span><br><span class="line">    os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 请求头配置（模拟Chrome浏览器）</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://image.baidu.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># URL编码关键词</span></span><br><span class="line">    encoded_keyword = urllib.parse.quote(keyword)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(max_pages):</span><br><span class="line">        <span class="comment"># 构造请求URL</span></span><br><span class="line">        url = <span class="string">f&quot;https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=10913573234020685783&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;fr=&amp;word=<span class="subst">&#123;encoded_keyword&#125;</span>&amp;queryWord=<span class="subst">&#123;encoded_keyword&#125;</span>&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=0&amp;hd=&amp;latest=©right=&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;expermode=&amp;nojc=&amp;pn=<span class="subst">&#123;page*<span class="number">30</span>&#125;</span>&amp;rn=30&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 发送请求</span></span><br><span class="line">            response = requests.get(url, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">            response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 正则提取图片URL（兼容新旧版本）</span></span><br><span class="line">            img_urls = re.findall(<span class="string">r&#x27;&quot;replaceUrl&quot;:\[&#123;&quot;OldURL&quot;:&quot;&quot;,&quot;NewURL&quot;:&quot;(.*?)&quot;&#125;]&#x27;</span>, response.text)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 下载图片</span></span><br><span class="line">            <span class="keyword">for</span> idx, img_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(img_urls):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    img_data = requests.get(img_url, headers=headers, timeout=<span class="number">8</span>).content</span><br><span class="line">                    filename = os.path.join(save_dir, <span class="string">f&quot;<span class="subst">&#123;keyword&#125;</span>_p<span class="subst">&#123;page+<span class="number">1</span>&#125;</span>_<span class="subst">&#123;idx+<span class="number">1</span>&#125;</span>.jpg&quot;</span>)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(img_data)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;已下载：<span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line">                    sleep(<span class="number">1</span>)  <span class="comment"># 请求间隔</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;下载失败：<span class="subst">&#123;img_url&#125;</span> - <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            sleep(<span class="number">2</span>)  <span class="comment"># 页间延迟</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求异常：<span class="subst">&#123;url&#125;</span> - <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    baidu_image_crawler(<span class="string">&quot;流浪地球&quot;</span>, max_pages=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.5 爬虫性能分析。编写程序测量30秒内成功获得百度主页的次数。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 单线程基础版（适合新手理解）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_version</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    timeout = <span class="number">30</span>  <span class="comment"># 总运行时间</span></span><br><span class="line">    success_count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> time.time() - start_time &lt; timeout:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 添加浏览器特征头（规避基础反爬）</span></span><br><span class="line">            response = requests.get(</span><br><span class="line">                <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">                headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&#x27;</span>&#125;,</span><br><span class="line">                timeout=<span class="number">2</span>  <span class="comment"># 单次请求超时限制</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                success_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求异常: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;成功次数: <span class="subst">&#123;success_count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">basic_version()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2.多线程进阶版（性能提升300%+）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stress_test</span>(<span class="params">workers=<span class="number">10</span></span>):</span><br><span class="line">    success_count = <span class="number">0</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send_request</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> success_count</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = requests.get(</span><br><span class="line">                <span class="string">&#x27;https://www.baidu.com&#x27;</span>, </span><br><span class="line">                headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;,</span><br><span class="line">                timeout=<span class="number">3</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">                success_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=workers) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">30</span>:</span><br><span class="line">            executor.submit(_send_request)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;并发成功率: <span class="subst">&#123;success_count&#125;</span>次&quot;</span>)</span><br><span class="line"></span><br><span class="line">stress_test(workers=<span class="number">20</span>)  <span class="comment"># 根据机器性能调整线程数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduBenchmark</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, duration=<span class="number">30</span>, max_workers=<span class="number">20</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.duration = duration</span><br><span class="line">        <span class="variable language_">self</span>.max_workers = max_workers</span><br><span class="line">        <span class="variable language_">self</span>.session = requests.Session()</span><br><span class="line">        <span class="variable language_">self</span>.ua = UserAgent()</span><br><span class="line">        <span class="variable language_">self</span>.success = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 连接池配置</span></span><br><span class="line">        adapter = requests.adapters.HTTPAdapter(</span><br><span class="line">            pool_connections=<span class="number">100</span>,</span><br><span class="line">            pool_maxsize=<span class="number">100</span>,</span><br><span class="line">            max_retries=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.session.mount(<span class="string">&#x27;https://&#x27;</span>, adapter)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_headers</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="variable language_">self</span>.ua.random,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = <span class="variable language_">self</span>.session.get(</span><br><span class="line">                <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">                headers=<span class="variable language_">self</span>._get_headers(),</span><br><span class="line">                timeout=<span class="number">3</span>,</span><br><span class="line">                allow_redirects=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="variable language_">self</span>.success += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">with</span> ThreadPoolExecutor(<span class="variable language_">self</span>.max_workers) <span class="keyword">as</span> executor:</span><br><span class="line">            <span class="keyword">while</span> time.time() - start &lt; <span class="variable language_">self</span>.duration:</span><br><span class="line">                executor.submit(<span class="variable language_">self</span>._send_request)</span><br><span class="line">                <span class="comment"># 动态延迟控制</span></span><br><span class="line">                time.sleep(random.uniform(<span class="number">0.1</span>, <span class="number">0.3</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;测试完成，成功率: <span class="subst">&#123;self.success&#125;</span>次&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    benchmark = BaiduBenchmark()</span><br><span class="line">    benchmark.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.6 中国大学爬虫优化。参考实例18，实现能够翻页的网络爬虫，获取全部近600所高校的中国大学排名信息。</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UniversityRankingCrawler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year=<span class="number">2025</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.base_url = <span class="string">f&quot;https://www.shanghairanking.cn/rankings/bcur/<span class="subst">&#123;year&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.shanghairanking.cn/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">self</span>.proxies = &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://10.10.1.10:3128&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://10.10.1.10:1080&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_decrypt_payload</span>(<span class="params">self, encrypted_str</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理Unicode转义字符（示例）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(encrypted_str, <span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_full_data</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(<span class="variable language_">self</span>.base_url, headers=<span class="variable language_">self</span>.headers, proxies=<span class="variable language_">self</span>.proxies)</span><br><span class="line">        encrypted_data = re.search(<span class="string">r&#x27;JSON\.parse\(\&#x27;(.*?)\&#x27;\)&#x27;</span>, response.text).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> json.loads(<span class="variable language_">self</span>._decrypt_payload(encrypted_data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_rankings</span>(<span class="params">self</span>):</span><br><span class="line">        raw_data = <span class="variable language_">self</span>.get_full_data()</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;排名&#x27;</span>: item[<span class="string">&#x27;rankOverall&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;学校名称&#x27;</span>: item[<span class="string">&#x27;univNameCn&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;省份&#x27;</span>: item[<span class="string">&#x27;province&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;总分&#x27;</span>: item[<span class="string">&#x27;score&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;科研指标&#x27;</span>: item[<span class="string">&#x27;indicators&#x27;</span>][<span class="string">&#x27;research&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;人才培养&#x27;</span>: item[<span class="string">&#x27;indicators&#x27;</span>][<span class="string">&#x27;talent&#x27;</span>]</span><br><span class="line">            &#125; <span class="keyword">for</span> item <span class="keyword">in</span> raw_data[<span class="string">&#x27;rankings&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;items&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_to_excel</span>(<span class="params">self, filename=<span class="string">&#x27;university_rankings.xlsx&#x27;</span></span>):</span><br><span class="line">        df = pd.DataFrame(<span class="variable language_">self</span>.parse_rankings())</span><br><span class="line">        df.to_excel(filename, index=<span class="literal">False</span>, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawler = UniversityRankingCrawler()</span><br><span class="line">    crawler.save_to_excel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.7 美国大学排名爬虫。参考实例18，实现USNEWS美国大学排名的爬虫，并打印结果。</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头生成器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_header</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().chrome,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.usnews.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单个页面的排名数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_rankings</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=get_random_header(), timeout=<span class="number">15</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        rankings = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> soup.select(<span class="string">&#x27;tr[data-view=&quot;rankings-table-row&quot;]&#x27;</span>):</span><br><span class="line">            cols = row.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(cols) &gt;= <span class="number">4</span>:</span><br><span class="line">                rankings.append(&#123;</span><br><span class="line">                    <span class="string">&#x27;Rank&#x27;</span>: cols[<span class="number">0</span>].get_text(strip=<span class="literal">True</span>),</span><br><span class="line">                    <span class="string">&#x27;University&#x27;</span>: cols[<span class="number">1</span>].a.get_text(strip=<span class="literal">True</span>),</span><br><span class="line">                    <span class="string">&#x27;State&#x27;</span>: cols[<span class="number">2</span>].get_text(strip=<span class="literal">True</span>),</span><br><span class="line">                    <span class="string">&#x27;Score&#x27;</span>: cols[<span class="number">3</span>].get_text(strip=<span class="literal">True</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">return</span> rankings</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抓取失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动检测总页数（示例实现）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_total_pages</span>(<span class="params">base_url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(base_url, headers=get_random_header())</span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        pagination = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pagination&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(pagination.find_all(<span class="string">&#x27;a&#x27;</span>)[-<span class="number">2</span>].text) <span class="keyword">if</span> pagination <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 默认返回1页</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主爬虫函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usnews_college_crawler</span>():</span><br><span class="line">    base_url = <span class="string">&quot;https://www.usnews.com/best-colleges/rankings/national-universities&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检测总页数</span></span><br><span class="line">    total_pages = detect_total_pages(base_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;检测到<span class="subst">&#123;total_pages&#125;</span>页数据&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    all_data = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历所有页面</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, total_pages + <span class="number">1</span>):</span><br><span class="line">        page_url = <span class="string">f&quot;<span class="subst">&#123;base_url&#125;</span>?_page=<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在抓取第 <span class="subst">&#123;page&#125;</span>/<span class="subst">&#123;total_pages&#125;</span> 页: <span class="subst">&#123;page_url&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        page_data = get_page_rankings(page_url)</span><br><span class="line">        <span class="keyword">if</span> page_data:</span><br><span class="line">            all_data.extend(page_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;已获取 <span class="subst">&#123;<span class="built_in">len</span>(page_data)&#125;</span> 条数据&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未获取到数据，可能已到达最后一页&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机延迟（3-6秒）</span></span><br><span class="line">        time.sleep(random.uniform(<span class="number">3</span>, <span class="number">6</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存数据到CSV</span></span><br><span class="line">    <span class="keyword">if</span> all_data:</span><br><span class="line">        df = pd.DataFrame(all_data)</span><br><span class="line">        filename = <span class="string">f&quot;USNews_College_Rankings_<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)&#125;</span>.csv&quot;</span></span><br><span class="line">        df.to_csv(filename, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据已保存至 <span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n前10名结果预览：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.head(<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未获取到有效数据&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 法律声明</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;本程序仅用于学习研究，请遵守USNEWS的使用条款。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据抓取间隔已设置为合规频率，请勿修改延迟参数。\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动爬虫</span></span><br><span class="line">    usnews_college_crawler()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MarkDown</title>
    <url>/2025/03/11/MarkDown/</url>
    <content><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这是斜体*</span></span><br><span class="line"><span class="emphasis">_这是斜体_</span></span><br><span class="line"><span class="strong">**这是粗体**</span></span><br><span class="line"><span class="strong">__这是粗体__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*这是斜粗体*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_这是斜粗体_</span>__</span></span><br><span class="line"></span><br><span class="line">快捷键：</span><br><span class="line">加粗 ctrl+B</span><br><span class="line">斜体 ctrl+I</span><br></pre></td></tr></table></figure>



<h1 id="3-换行"><a href="#3-换行" class="headerlink" title="3.换行"></a>3.换行</h1><ol>
<li>直接在一句话后加两个空格</li>
<li>两句话之间加一个空行</li>
<li><br></li>
</ol>
<h1 id="4-引用（可以嵌套）"><a href="#4-引用（可以嵌套）" class="headerlink" title="4.引用（可以嵌套）"></a>4.引用（可以嵌套）</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是一个引用</span><br></pre></td></tr></table></figure>

<h2 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h2><blockquote>
<p>这是一个引用</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是一个引用</span><br><span class="line">&gt;&gt;这是一个引用的引用</span><br><span class="line">&gt;&gt;&gt;这是一个引用的引用的引用</span><br></pre></td></tr></table></figure>

<h2 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h2><blockquote>
<p>这是一个引用</p>
<blockquote>
<p>这是一个引用的引用</p>
<blockquote>
<p>这是一个引用的引用的引用</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="5-链接"><a href="#5-链接" class="headerlink" title="5.链接"></a>5.链接</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line">即是：</span><br><span class="line">[<span class="string">这是绛的主页</span>](<span class="link">https://blog.csdn.net/2303_77025487?spm=1018.2226.3001.5343</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="language-xml">&lt;https://blog.csdn.net/2303_77025487?spm=1018.2226.3001.5343&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h2><p><a href="%5B%E7%BB%9B-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/2303_77025487?spm=1018.2226.3001.5343)">这是绛的主页</a></p>
<p>或者</p>
<p>&lt;<a href="https://blog.csdn.net/2303_77025487?spm=1018.2226.3001.5343">绛-CSDN博客</a>&gt;</p>
<h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6.图片"></a>6.图片</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片描述，可写可不写，但是中括号要有</span>](<span class="link">图片地址，本地链接或者URL地址。</span>)</span><br><span class="line">比如我此文章的图片：</span><br><span class="line">![<span class="string">绛</span>](<span class="link">https://img-blog.csdnimg.cn/8bbc653f3f854023856762ed2c8e43e9.png</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h2><p>![图片描述，可写可不写，但是中括号要有](D:\My project\笔记\学习笔记\2.工具的具体使用\Typora\图片地址，本地链接或者URL地址。)<br>比如我此文章的图片：<br>![蜡笔小新](“C:\Users\86152\Pictures\Saved Pictures\蜡笔小新呀.png”)<br>)</p>
<h2 id="可以修改图片位置和大小"><a href="#可以修改图片位置和大小" class="headerlink" title="可以修改图片位置和大小"></a>可以修改图片位置和大小</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片描述，可写可不写，但是中括号要有</span>](<span class="link">图片地址，本地链接或者URL地址#pic_center空格=长x宽</span>)</span><br><span class="line">比如我此文章的图片：</span><br><span class="line">![<span class="string">绛</span>](<span class="link">https://img-blog.csdnimg.cn/8bbc653f3f854023856762ed2c8e43e9.png#pic_center =60x60</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序列表 1</span><br><span class="line"><span class="bullet">+</span> 无序列表 2</span><br><span class="line"><span class="bullet">-</span> 无序列表 3</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表 1</span><br><span class="line"><span class="bullet">2.</span> 有序列表 2</span><br><span class="line"><span class="bullet">3.</span> 有序列表 3</span><br></pre></td></tr></table></figure>

<h2 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h2><p>* </p>
<p>+ </p>
<p>- </p>
<ol>
<li></li>
<li></li>
<li></li>
</ol>
<p>控制列表的层级使用tab</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> 无序列表 1</span><br><span class="line"><span class="bullet">+</span> 无序列表 2</span><br><span class="line"><span class="bullet">	+</span> 无序列表 2.1</span><br><span class="line"><span class="bullet">	+</span> 无序列表 2.2</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表 1</span><br><span class="line"><span class="code">	1.1 有序列表 1.1</span></span><br><span class="line"><span class="code">2. 有序列表 2</span></span><br><span class="line"><span class="code">	2.1 有序列表2.1</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<h2 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h2><p>+ </p>
<ul>
<li><ul>
<li></li>
<li></li>
</ul>
</li>
</ul>
<p>1.<br>2. 1.<br>   2.  </p>
<h1 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">分割线：</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong">- - -</span></span><br><span class="line"><span class="strong">* * *</span></span><br><span class="line"><span class="strong"></span></span><br></pre></td></tr></table></figure>

<h2 id="效果：-7"><a href="#效果：-7" class="headerlink" title="效果："></a>效果：</h2><hr>
<hr>
<hr>
<hr>
<h1 id="9-删除线"><a href="#9-删除线" class="headerlink" title="9. 删除线"></a>9. 删除线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~这是要被删除的文字~~</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-8"><a href="#效果：-8" class="headerlink" title="效果："></a>效果：</h2><p><del>这是我一直喜欢Elysia的原因</del></p>
<h1 id="10-下划线"><a href="#10-下划线" class="headerlink" title="10. 下划线"></a>10. 下划线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">与html类似</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>我还是很喜欢你<span class="language-xml"><span class="tag">&lt;/<span class="name">U</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="效果：-9"><a href="#效果：-9" class="headerlink" title="效果："></a>效果：</h2><p><u>我还是喜欢你</u></p>
<h1 id="11-代码块"><a href="#11-代码块" class="headerlink" title="11.代码块"></a>11.代码块</h1><p>Markdown中代码块有两种：<br>如果在一行内需要引用代码，只需要用反引号&#96;引起来就好了。<br>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`Hello`</span> World.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-10"><a href="#效果：-10" class="headerlink" title="效果："></a>效果：</h2><p><code>Hello</code> World.</p>
<p>如果是在一个块内需要引用代码，则在需要引用的代码块的前一行和后一行使用三个反引号，同时在前一个反引号后写入代码的语言。<br>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```cpp</span></span><br><span class="line"><span class="code">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="code">int main()&#123;</span></span><br><span class="line"><span class="code">printf(&quot;Hello World&quot;);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<h2 id="效果：-11"><a href="#效果：-11" class="headerlink" title="效果："></a>效果：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">支持以下语言：</span><br><span class="line">bash</span><br><span class="line">c，clojure，cpp，cs，css</span><br><span class="line">dart，dockerfile, diff</span><br><span class="line">erlang</span><br><span class="line">go，gradle，groovy</span><br><span class="line">haskell</span><br><span class="line">java，javascript，json，julia</span><br><span class="line">kotlin</span><br><span class="line">lisp，lua</span><br><span class="line">makefile，markdown，matlab</span><br><span class="line">objectivec</span><br><span class="line">perl，php，python</span><br><span class="line">r，ruby，rust</span><br><span class="line">scala，shell，sql，swift</span><br><span class="line">tex，typescript</span><br><span class="line">verilog，vhdl</span><br><span class="line">xml</span><br><span class="line">yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="12-表格"><a href="#12-表格" class="headerlink" title="12.表格"></a>12.表格</h1><p>表格使用<code>|</code>来分割不同的单元格，使用<code>-</code>来分隔表头和其他行</p>
<ul>
<li><code>:-</code>：将表头及单元格内容左对齐</li>
<li><code>-:</code>：将表头及单元格内容右对齐</li>
<li><code>:-:</code>：将表头及单元格内容居中</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-12"><a href="#效果：-12" class="headerlink" title="效果："></a>效果：</h2><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>项目</th>
<th>价格</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="13-脚注"><a href="#13-脚注" class="headerlink" title="13.脚注"></a>13.脚注</h1><p>脚注是对文本的备注，我们时长在论文中看到脚注，在Markdown中的使用方法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Typora[^T] 编辑器进行书写。</span><br><span class="line">[<span class="symbol">^1</span>]:<span class="link">Markdown是一种纯文本标记语言</span></span><br><span class="line">[<span class="symbol">^2</span>]:<span class="link">HyperText Markup Language 超文本标记语言</span></span><br><span class="line">[<span class="symbol">^T</span>]:<span class="link">NEW WAY TO READ &amp; WRITE MARKDOWN.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-13"><a href="#效果：-13" class="headerlink" title="效果："></a>效果：</h2><p>使用 Markdown<a href="Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Typora[^T] 编辑器进行书写。</p>
<p>[^2]: HyperText Markup Language 超文本标记语言<br>[^T]: NEW WAY TO READ &amp; WRITE MARKDOWN. </p>
<h1 id="14-特殊符号"><a href="#14-特殊符号" class="headerlink" title="14.特殊符号"></a>14.特殊符号</h1><p>对于Markdown中的语法符号，前面家反斜线<code>\</code>即可以显示符号本身。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\\</span><br><span class="line">\*</span><br><span class="line">\_</span><br><span class="line">\+</span><br><span class="line">\.</span><br><span class="line">等等</span><br></pre></td></tr></table></figure>

<h2 id="效果：-14"><a href="#效果：-14" class="headerlink" title="效果："></a>效果：</h2><p>\<br>*<br>_<br>+<br>.</p>
<h1 id="15-制作待办事项"><a href="#15-制作待办事项" class="headerlink" title="15.制作待办事项"></a>15.制作待办事项</h1><p>我们可以使用<code>Markdown</code>来制作一个待办事项，格式为、<code>-[]</code> 表示未完成；<code>-[x]</code>表示已完成</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 支持以 PDF 格式导出文稿</span><br><span class="line"><span class="bullet">-</span> [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line"><span class="bullet">-</span> [x] 新增 Todo 列表功能</span><br><span class="line"><span class="bullet">-</span> [x] 修复 LaTex 公式渲染问题</span><br><span class="line"><span class="bullet">-</span> [x] 新增 LaTex 公式编号功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-15"><a href="#效果：-15" class="headerlink" title="效果："></a>效果：</h2><ul>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li>
</ul>
<h1 id="16-书写公式"><a href="#16-书写公式" class="headerlink" title="16.书写公式"></a>16.书写公式</h1><p>Markdown支持书写公式，例如书写一个质能守恒公式。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$E=mc^2$$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果：-16"><a href="#效果：-16" class="headerlink" title="效果："></a>效果：</h2><p>$$E&#x3D;mc^2$$</p>
<h1 id="17-支持HTML"><a href="#17-支持HTML" class="headerlink" title="17.支持HTML"></a>17.支持HTML</h1><h1 id="18-绘制图表：有更好的soft"><a href="#18-绘制图表：有更好的soft" class="headerlink" title="18.绘制图表：有更好的soft"></a>18.绘制图表：有更好的soft</h1><h1 id="Markdown高级语法：Markdown-高级技巧-菜鸟教程-runoob-com"><a href="#Markdown高级语法：Markdown-高级技巧-菜鸟教程-runoob-com" class="headerlink" title="Markdown高级语法：Markdown 高级技巧 | 菜鸟教程 (runoob.com)"></a>Markdown高级语法：<a href="https://www.runoob.com/markdown/md-advance.html">Markdown 高级技巧 | 菜鸟教程 (runoob.com)</a></h1>]]></content>
  </entry>
  <entry>
    <title>GUI.JFrame_总结</title>
    <url>/2025/03/11/GUI-JFrame-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;JFrameDemo&quot;</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">        jf.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        jf.setBackground(Color.blue);</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line">        jLabel.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        jf.add(jLabel);</span><br><span class="line">		<span class="comment">//自带监听效果</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JFrameDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<blockquote>
<p>直接继承Jframe类，可以直接调用其中的方法，this可以省略，但是<strong>可以增加可读性</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPrameDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPrameDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        container.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">        container.setBackground(Color.red);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        container.add(panel1);</span><br><span class="line">        container.add(panel2);</span><br><span class="line"></span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;5&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;6&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JPrameDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建一个文本域</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javafx.scene.input.KeyCode.J;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JScrollDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JScrollDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">textArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">        textArea.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        textArea.setLineWrap(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(textArea);</span><br><span class="line">        container.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        container.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JScrollDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="一个简单的文本下拉框"><a href="#一个简单的文本下拉框" class="headerlink" title="一个简单的文本下拉框"></a>一个简单的文本下拉框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComoboxDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComoboxDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JComboBox</span> <span class="variable">comboBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">        comboBox.addItem(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        comboBox.addItem(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        comboBox.addItem(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        comboBox.addItem(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        container.add(comboBox);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ComoboxDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="总结：GUI图形化编程，实际的应用场景并不广泛，缺乏美观，已经逐渐淘汰。"><a href="#总结：GUI图形化编程，实际的应用场景并不广泛，缺乏美观，已经逐渐淘汰。" class="headerlink" title="总结：GUI图形化编程，实际的应用场景并不广泛，缺乏美观，已经逐渐淘汰。"></a>总结：GUI图形化编程，实际的应用场景并不广泛，缺乏美观，已经逐渐淘汰。</h2>]]></content>
  </entry>
  <entry>
    <title>GUI.事件监听</title>
    <url>/2025/03/11/GUI-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson2;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActionEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// ✅ 添加 static</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;ActionEvent&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;click me&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加监听器addActionListener()MyactionListener,但是因为是接口，所以我们要写一个类去实现</span></span><br><span class="line">        <span class="comment">// ✅ 修正内部类为静态</span></span><br><span class="line">        <span class="type">MyactionListener</span> <span class="variable">myactionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyactionListener</span>();</span><br><span class="line">        button.addActionListener(myactionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button, BorderLayout.CENTER);</span><br><span class="line">        frame.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        WindowClose(frame); <span class="comment">// ✅ 调用关闭监听设置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">WindowClose</span><span class="params">(Frame frame)</span> &#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 将内部类声明为 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyactionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActionEvent2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        button.setActionCommand(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        button1.setActionCommand(<span class="string">&quot;end and over&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mymonitor</span> <span class="variable">mymonitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mymonitor</span>();</span><br><span class="line">        button.addActionListener(mymonitor);</span><br><span class="line">        button1.addActionListener(mymonitor);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.WEST);</span><br><span class="line">        frame.add(button1,BorderLayout.EAST);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">WindowCloseMonitor</span> <span class="variable">windowCloseMonitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowCloseMonitor</span>();</span><br><span class="line">        frame.addWindowListener(windowCloseMonitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymonitor</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello:msg=&gt;&quot;</span>+e.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个继承自WindowAdapter的类WindowCloseMonitor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowCloseMonitor</span> <span class="keyword">extends</span> <span class="title class_">WindowAdapter</span> &#123;</span><br><span class="line">    <span class="comment">// 重写windowClosing方法，当窗口关闭时执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// 退出程序</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestText01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line">        add(tf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        <span class="type">Myaction</span> <span class="variable">myaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myaction</span>();</span><br><span class="line">        <span class="comment">//注册监听,触发文本框</span></span><br><span class="line">        tf.addActionListener(myaction);</span><br><span class="line">        <span class="comment">//设置文本框输入框的长度</span></span><br><span class="line">        tf.setSize(<span class="number">200</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//文本框输入框的默认显示文字</span></span><br><span class="line">        tf.setText(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="comment">//文本框输入框的显示模式</span></span><br><span class="line">        tf.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        pack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myaction</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> (TextField) e.getSource();</span><br><span class="line">        System.out.println(tf.getText());</span><br><span class="line">        tf.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="计算器和内部类"><a href="#计算器和内部类" class="headerlink" title="计算器和内部类"></a>计算器和内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCaculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calculator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建组件三个文本框</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;计算&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MycalculatorListener</span>(num1, num2,num3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个标签</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MycalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextField num1,num2,num3;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MycalculatorListener</span><span class="params">(TextField num1,TextField num2, TextField num3)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = num1;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">        <span class="built_in">this</span>.num3 = num3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取num1和num2的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line">        <span class="comment">//2.计算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> n1 + n2;</span><br><span class="line">        <span class="comment">//3.将结果放入num3中</span></span><br><span class="line">        num3.setText(<span class="string">&quot;&quot;</span> + n3);</span><br><span class="line">        <span class="comment">//4.清楚前两个框</span></span><br><span class="line">        num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson2;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalculatorRemake</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="comment">// 将文本框声明为成员变量，便于内部类访问</span></span><br><span class="line">    <span class="keyword">private</span> TextField num1, num2, num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化组件</span></span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;计算&quot;</span>);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加监听器（使用内部类）</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalculatorListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置布局并添加组件</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 窗口设置</span></span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加窗口关闭监听</span></span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类实现监听逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 获取输入并计算</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">                <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line">                num3.setText(String.valueOf(n1 + n2));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 清空输入框</span></span><br><span class="line">                num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">                num3.setText(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="窗口监听"><a href="#窗口监听" class="headerlink" title="窗口监听"></a>窗口监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WindowFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setBackground(Color.blue);</span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;windowClosing&quot;</span>);</span><br><span class="line">                        System.exit(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowOpened</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                        <span class="built_in">super</span>.windowOpened(e);</span><br><span class="line">                        System.out.println(<span class="string">&quot;windowOpened&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
  </entry>
  <entry>
    <title>GUI.Frame</title>
    <url>/2025/03/11/GUI-Frame/</url>
    <content><![CDATA[<h2 id="1-Frame"><a href="#1-Frame" class="headerlink" title="1.Frame"></a>1.Frame</h2><p><strong>Java AWT中的Frame类，作为顶级窗口类，继承自Window，有构造方法和各种属性。这说明在Java中Frame确实是一个类。</strong></p>
<hr>
<p>查看源码，找到java类中的方法可以更加了解java的原理</p>
<blockquote>
<p>查看方法 ctrl + 鼠标左键</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个窗口对象,不懂的对象直接ctrl看源码</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;我的第一个窗口&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);<span class="comment">//设置窗口可见</span></span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">400</span>, <span class="number">400</span>);<span class="comment">//设置窗口大小</span></span><br><span class="line"></span><br><span class="line">        frame.setBackground(Color.blue);<span class="comment">//设置窗口背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);<span class="comment">//设置窗口位置</span></span><br><span class="line"></span><br><span class="line">        frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);<span class="comment">//设置窗口位置</span></span><br><span class="line"></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);<span class="comment">//设置窗口是否可以改变大小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyFrame2</span> <span class="variable">MyFrame1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame2</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, Color.BLUE);</span><br><span class="line">        <span class="type">MyFrame2</span> <span class="variable">MyFrame2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame2</span>(<span class="number">300</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, Color.BLUE);</span><br><span class="line">        <span class="type">MyFrame2</span> <span class="variable">MyFrame3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame2</span>(<span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">200</span>, Color.BLUE);</span><br><span class="line">        <span class="type">MyFrame2</span> <span class="variable">MyFrame4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame2</span>(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">200</span>, Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame2</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, Color color)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造函数，设置窗口标题为&quot;MyFrame&quot; + (++id)</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyFrame&quot;</span> + (++id));</span><br><span class="line">        <span class="comment">// 设置窗口的位置和大小</span></span><br><span class="line">        setBounds(x, y, width, height);</span><br><span class="line">        <span class="comment">// 设置窗口的背景颜色</span></span><br><span class="line">        setBackground(color);</span><br><span class="line">        <span class="comment">// 设置窗口可见</span></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="2-Panel-无法单独实现，必须加到某个容器"><a href="#2-Panel-无法单独实现，必须加到某个容器" class="headerlink" title="2.Panel:无法单独实现，必须加到某个容器"></a>2.Panel:无法单独实现，必须加到某个容器</h2><blockquote>
<p>在Frame中无需创建容器，所以<strong>Panel依托于Frame窗口实现</strong>，位置在窗口中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//panel不能单独存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="comment">// 主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="comment">// 创建一个Panel对象</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置布局管理器</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置frame的坐标和大小</span></span><br><span class="line">        frame.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        frame.setBackground(Color.blue);</span><br><span class="line">        <span class="comment">// 设置panel的坐标和大小相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        panel.setBackground(Color.red);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将panel添加到frame中</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        <span class="comment">// 设置frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭窗口</span></span><br><span class="line">        <span class="comment">//适配器模式WindowAdapter()</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3.布局管理器"></a>3.布局管理器</h2><h3 id="1-流式"><a href="#1-流式" class="headerlink" title="1.流式"></a>1.流式</h3><blockquote>
<p>流式布局<strong>自动适配屏幕尺寸</strong>，通过百分比（<code>%</code>）控制面板处于当前容器的位置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFlowLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;测试流式布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置frame的布局为流式布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        frame.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加按钮</span></span><br><span class="line">        frame.add(button);</span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-东西南北中"><a href="#2-东西南北中" class="headerlink" title="2.东西南北中"></a>2.东西南北中</h3><blockquote>
<p>通过<strong>东西南北中</strong>控制面板在容器中的位置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBorderLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个Frame对象，设置标题为&quot;测试BorderLayout&quot;</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;测试BorderLayout边框布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建五个Button对象，分别设置文本为&quot;East&quot;、&quot;West&quot;、&quot;South&quot;、&quot;North&quot;和&quot;center&quot;</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">West</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">South</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">North</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将五个Button对象分别添加到Frame对象的BorderLayout布局中，设置位置分别为东、西、南、北和中间</span></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(West,BorderLayout.WEST);</span><br><span class="line">        frame.add(South,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(North,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Frame对象的大小为500*500</span></span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 设置Frame对象可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为Frame对象添加一个WindowListener，当窗口关闭时退出程序</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h3><blockquote>
<p>GridLayout<strong>有参数控制行数和列数</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGridLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;GridLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="4-大小，定位，可见"><a href="#4-大小，定位，可见" class="headerlink" title="4.大小，定位，可见"></a>4.大小，定位，可见</h2><blockquote>
<p>一个容器使用排版示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Ego.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;Demo&quot;</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(Color.blue);</span><br><span class="line">        frame.setLocation(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//四个面板</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West&quot;</span>),BorderLayout.WEST);</span><br><span class="line"></span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;South&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;North&quot;</span>));</span><br><span class="line"></span><br><span class="line">        p1.add(p2,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下半部分</span></span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East1&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;WEST1&quot;</span>),BorderLayout.WEST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        p3.add(p4,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frame.add(p1);</span><br><span class="line">        frame.add(p3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Annotation</title>
    <url>/2025/03/15/Annotation/</url>
    <content><![CDATA[<h2 id="一些基本的注解"><a href="#一些基本的注解" class="headerlink" title="一些基本的注解"></a>一些基本的注解</h2><blockquote>
<p>主要用于重写或者抑制编译器的警告</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descrption</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/3/14 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不推荐程序员使用，但是可以使用，并且编译器会警告</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抑制编译器警告</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pratice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pratice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="如何创建一个注解"><a href="#如何创建一个注解" class="headerlink" title="如何创建一个注解"></a>如何创建一个注解</h2><blockquote>
<p>不能使用public定义注解，一个类只能有一个public</p>
<p><em><strong>主要需要的@Retention和@Target</strong></em></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2025/3/14 19:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:meta-annotation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Target表示我们的注解可以用在什么地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示我们的注解在什么地方还有效</span></span><br><span class="line"><span class="comment">//runtime 》 class 》 source</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示注解是否被包含在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="实际运用创建注解"><a href="#实际运用创建注解" class="headerlink" title="实际运用创建注解"></a>实际运用创建注解</h2><blockquote>
<p>参数有默认值就不需要传递</p>
<p>只有一个参数为<strong>value</strong>时，<strong>直接传参无需写参数名</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation2(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型 + 参数名();</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//如果默认值为-1，代表不存在</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;清华大学&quot;</span>,<span class="string">&quot;北京大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//只有一个参数的情况下，定义参数名为value，传递参数的时候可以直接传递</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Reflection</title>
    <url>/2025/03/15/Reflection/</url>
    <content><![CDATA[<h2 id="反射获取Class对象"><a href="#反射获取Class对象" class="headerlink" title="反射获取Class对象"></a>反射获取Class对象</h2><blockquote>
<p>简单通过<em><strong>反射获取</strong></em>Class对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:测试class类的创建方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取Class对象</span></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ego.reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类,类名和表名对应,属性和字段对应,pojo,entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String password, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString方法，方碑调试</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="测试class类的创建方式"><a href="#测试class类的创建方式" class="headerlink" title="测试class类的创建方式"></a>测试class类的创建方式</h2><blockquote>
<p><strong>你知道class类有几种写法吗(孔乙己版)</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:测试class类的创建方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试class类的创建方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        <span class="comment">//通过对象获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//forname获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ego.reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        <span class="comment">//通过类.class获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        <span class="comment">//基本内置类都有一个Type属性</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teather</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teather</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Teather&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="可以获取多种class类"><a href="#可以获取多种class类" class="headerlink" title="可以获取多种class类"></a>可以获取多种class类</h2><blockquote>
<p><strong>只要元素类型与维度一样就是同一个Class</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:测试class类的创建方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Class对象的方式</span></span><br><span class="line">        <span class="comment">//只要元素类型与维度一样就是同一个Class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> String.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Comparable.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer[].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="type">int</span>[][].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Override.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> String[].class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c10</span> <span class="operator">=</span> <span class="keyword">void</span>.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c11</span> <span class="operator">=</span> Class.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 );</span><br><span class="line">        System.out.println(c2 );</span><br><span class="line">        System.out.println(c3 );</span><br><span class="line">        System.out.println(c4 );</span><br><span class="line">        System.out.println(c5 );</span><br><span class="line">        System.out.println(c6 );</span><br><span class="line">        System.out.println(c7 );</span><br><span class="line">        System.out.println(c8 );</span><br><span class="line">        System.out.println(c9 );</span><br><span class="line">        System.out.println(c10);</span><br><span class="line">        System.out.println(c11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="静态代码块的实现的过程"><a href="#静态代码块的实现的过程" class="headerlink" title="静态代码块的实现的过程"></a>静态代码块的实现的过程</h2><blockquote>
<p><em><strong>首先加载的一定是main()</strong></em></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        System.out.println(Example.m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Example类的静态代码块&quot;</span>);</span><br><span class="line">        m = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Example类的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>![image-20250315115027418](E:\hobby\Hexo Blog\blog\source_posts\Reflection.assets\image-20250315115027418.png)</p>
<h2 id="加载静态代码块"><a href="#加载静态代码块" class="headerlink" title="加载静态代码块"></a>加载静态代码块</h2><blockquote>
<p><strong>加载的过程中会先加载子类的父类</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:测试类的初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test5类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//主动引用</span></span><br><span class="line">        <span class="comment">//Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射也会产生主动引用</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;com.ego.reflection.Son&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">        <span class="comment">//System.out.println(Son.a);</span></span><br><span class="line">        <span class="comment">//Son[] son = new Son[10];</span></span><br><span class="line">        <span class="comment">//System.out.println(Son.c);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son类的静态代码块&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="初识类加载器"><a href="#初识类加载器" class="headerlink" title="初识类加载器"></a>初识类加载器</h2><blockquote>
<p><strong>了解类加载器的加载顺序</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/8/31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:类加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器：扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器：根加载器(C/C++)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Test6.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是谁加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取环境变量的加载路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双亲委派机制</span></span><br><span class="line">            <span class="comment">//java.lang.string是无法更改的，如果我们创建一个java.lang.string，会从扩展类加载器检验到扩展类加载器再到根加载器，如果存在我们创建的就会失效</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\charsets.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\deploy.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\access-bridge-64.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\cldrdata.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\dnsns.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\jaccess.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\jfxrt.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\localedata.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\nashorn.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\sunec.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\sunjce_provider.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\sunmscapi.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\sunpkcs11.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\ext\zipfs.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\javaws.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\jce.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\jfr.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\jfxswt.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\jsse.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\management-agent.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\plugin.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\resources.jar;</span></span><br><span class="line"><span class="comment">        C:\Program Files\Java\jdk1.8.0_102\jre\lib\rt.jar;</span></span><br><span class="line"><span class="comment">        D:\My project\Test\java\AnnotationReflection\out\production\AnnotationReflection;</span></span><br><span class="line"><span class="comment">        D:\tools\code editor\ideal\ideaIU-2021.3.3.win\lib\idea_rt.jar</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h2><blockquote>
<p>通过Class<strong>类获取类的信息</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:获取类的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//获取类的信息</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ego.reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(aClass.getName());<span class="comment">//获取类的全限定名</span></span><br><span class="line">        System.out.println(aClass.getSimpleName());<span class="comment">//获取类的简单名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的属性</span></span><br><span class="line">        Field[] fields = aClass.getFields();<span class="comment">//获取所有public修饰的属性</span></span><br><span class="line"></span><br><span class="line">        fields = aClass.getDeclaredFields();<span class="comment">//获取所有属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName());<span class="comment">//获取属性名</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定属性的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = aClass.getMethods();<span class="comment">//获取本类和父类所有public修饰的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = aClass.getDeclaredMethods();<span class="comment">//获取本类所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line"><span class="comment">//        Constructor[] constructors = aClass.getConstructor();</span></span><br><span class="line"><span class="comment">//        for (Constructor constructor : constructors) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(constructor);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        constructors = aClass.getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">//        for (Constructor constructor : constructors) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(constructor);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> aClass.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:通过反射，动态的创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//1.获取类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ego.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过Class对象创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)aClass.newInstance(); <span class="comment">//底层调用了User的无参构造方法</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过构造器创建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> aClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class,String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) constructor.newInstance(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过反射调用普通构造方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User)aClass.newInstance();</span><br><span class="line">        <span class="comment">//5.通过反射获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//6.通过反射调用方法</span></span><br><span class="line">        setName.invoke(user2,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        System.out.println(user2.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.通过反射操作属性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> (User)aClass.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射修改属性</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>); <span class="comment">//暴力反射,修改私有属性，取消Java语言访问检查</span></span><br><span class="line">        name.set(user3,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="各种调用对象方法的性能分析"><a href="#各种调用对象方法的性能分析" class="headerlink" title="各种调用对象方法的性能分析"></a>各种调用对象方法的性能分析</h2><blockquote>
<p><strong>反射调用通常关闭检测提高效率</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:分析性能问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式调用耗时：&quot;</span> + (end - start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> user1.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user1,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式调用耗时：&quot;</span> + (end - start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用，关闭检测</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Test3</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> user1.getClass();</span><br><span class="line">        <span class="comment">//创建的对象可以随意命名，其代表的意思是传递的方法例如&quot;getName&quot;</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//关闭检测</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            method.invoke(user1,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式关闭检测调用耗时：&quot;</span> + (end - start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException &#123;</span><br><span class="line">        Test1();</span><br><span class="line">        Test2();</span><br><span class="line">        Test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="通过反射获取泛型"><a href="#通过反射获取泛型" class="headerlink" title="通过反射获取泛型"></a>通过反射获取泛型</h2><blockquote>
<p><strong>比较难理解</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:通过反射获取泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,User&gt; <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Test10.class.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class, List.class);</span><br><span class="line"></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;$$&quot;</span>+genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;actualTypeArgument:&quot;</span>+actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        method = Test10.class.getMethod(<span class="string">&quot;test2&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;actualTypeArgument:&quot;</span>+actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="反射获取注解"><a href="#反射获取注解" class="headerlink" title="反射获取注解"></a>反射获取注解</h2><blockquote>
<p><strong>一个简单的注解和反射的应用</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ego</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/3/15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:通过反射，反射操作注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.ego.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ego.reflection.Student1&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射获取注解,获取类上的注解,返回注解对象,如果该类没有注解，则返回null,不是注解的实例,annotation是接口,所以返回null</span></span><br><span class="line">        <span class="comment">//aClass.getAnnotations()获取所有注解，aClass.getAnnotation(TableEgo.class)获取对应注解</span></span><br><span class="line">        Annotation[] annotations = aClass.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotations);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取注解的值</span></span><br><span class="line">        <span class="type">TableEgo</span> <span class="variable">tableEgo</span> <span class="operator">=</span> (TableEgo)aClass.getAnnotation(TableEgo.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> tableEgo.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">FieldEgo</span> <span class="variable">annotation</span> <span class="operator">=</span> id.getAnnotation(FieldEgo.class);</span><br><span class="line">        System.out.println(annotation.colName());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableEgo(&quot;db_student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student1</span>&#123;</span><br><span class="line">    <span class="meta">@FieldEgo(colName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@FieldEgo(colName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@FieldEgo(colName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student1</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> age,String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TableEgo&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldEgo&#123;</span><br><span class="line">    String <span class="title function_">colName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>MySQLday1</title>
    <url>/2025/03/16/MySQLday1/</url>
    <content><![CDATA[<p>![image-20250316092404391](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316092404391.png)</p>
<h2 id="1-初始MySql"><a href="#1-初始MySql" class="headerlink" title="1.初始MySql"></a>1.初始MySql</h2><ol>
<li><p>数据库是连接前后端的桥梁，负责存储数据</p>
</li>
<li><p>MySql是一种关系数据库(Relationship Database)</p>
</li>
<li><p>数据库分为关系数据库(SQL)（MySql，Oracle）和非关系数据库(NoSQL,Not Only SQL)（Redis，MongDB）</p>
</li>
<li><p>DBMS和DB的关系</p>
</li>
</ol>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><blockquote>
<p>命令行，也就是<em><strong>命令窗口连接数据库</strong></em></p>
<p><strong>基本的sql操作</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>proot  <span class="comment">--连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改用户密码</span></span><br><span class="line"></span><br><span class="line">flush privileges  <span class="comment">--刷新用户权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有语句都使用；结尾，sql语句允许换行输入查询</span></span><br><span class="line"><span class="keyword">show</span> database;  <span class="comment">--查看所有数据库</span></span><br><span class="line"></span><br><span class="line">use school;  <span class="comment">--切换数据库为school</span></span><br><span class="line"></span><br><span class="line">Database changed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;  <span class="comment">--查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student;  <span class="comment">--显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database teacher;  <span class="comment">--创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit;  <span class="comment">--推出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>DDL  定义</p>
<p>DML  操作</p>
<p>DQL  查询</p>
<p>DCL  控制</p>
<h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><h3 id="2-1操作数据库（了解）"><a href="#2-1操作数据库（了解）" class="headerlink" title="2.1操作数据库（了解）"></a>2.1操作数据库（了解）</h3><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure>


</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  如果表名或者字段名是一个特殊字符时使用</span></span><br><span class="line">USE `cloudlibrary`;</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASE </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2数据库的数据类型"><a href="#2-2数据库的数据类型" class="headerlink" title="2.2数据库的数据类型"></a>2.2数据库的数据类型</h3><blockquote>
<p>基本类型</p>
</blockquote>
<ul>
<li><strong>int   标准整数     四个字节  常用</strong></li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li><strong>varchar   可变字符   0 - 65535  常用</strong></li>
</ul>
<blockquote>
<p>时间和日期</p>
</blockquote>
<ul>
<li><strong>datetime</strong>  <strong>常用</strong></li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<h3 id="2-3数据库的字段属性（重点）"><a href="#2-3数据库的字段属性（重点）" class="headerlink" title="2.3数据库的字段属性（重点）"></a>2.3数据库的字段属性（重点）</h3><p>![image-20250316115342383](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316115342383.png)</p>
<hr>
<ul>
<li>自增</li>
</ul>
<blockquote>
<p>主要作用于主键</p>
<p>可以设置步长</p>
</blockquote>
<ul>
<li>非空</li>
</ul>
<blockquote>
<p>设置非空后不填入数据会报错</p>
</blockquote>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  每一个表，都必须存在一下五个字段，未来做项目会使用，表示一个记录存在的意义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id         主键</span></span><br><span class="line"><span class="comment">`version`  乐观锁</span></span><br><span class="line"><span class="comment">is_delete  伪删除</span></span><br><span class="line"><span class="comment">gmt_create 创建时间</span></span><br><span class="line"><span class="comment">gmt_update 修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4创建数据库表（重点）"><a href="#2-4创建数据库表（重点）" class="headerlink" title="2.4创建数据库表（重点）"></a>2.4创建数据库表（重点）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数据库school</span></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="comment">--  学号int，登陆密码，姓名，性别，出生日期，家庭住址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用英文括号，表名 和 字段名 最好使用``括起来</span></span><br><span class="line"><span class="comment">-- navicat自增在设置主键的时候设置</span></span><br><span class="line"><span class="comment">-- 字符串使用&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加, 最后一个不加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY(`id`),一般一个表只有一个</span></span><br><span class="line"><span class="comment">-- CREATE DATABASE IF NOT EXISTS `school`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `student`(</span><br><span class="line">		`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">		`name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">		`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">		`gender` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">		`address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">		`email` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">		<span class="keyword">PRIMARY KEY</span>(`id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `表名`(</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">......</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `school`  <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> `student`  <span class="comment">-- 查看创建表的语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> student  <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5数据表的类型"><a href="#2-5数据表的类型" class="headerlink" title="2.5数据表的类型"></a>2.5数据表的类型</h3><blockquote>
<p>物理空间存储的位置都在data目录下，本质还是文件的存储</p>
</blockquote>
<p>![image-20250316160615846](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316160615846.png)</p>
<hr>
<p>![image-20250316160638048](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316160638048.png)</p>
<hr>
<h3 id="2-6修改删除表"><a href="#2-6修改删除表" class="headerlink" title="2.6修改删除表"></a>2.6修改删除表</h3><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名 ALTER TABLE 表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student RENAME <span class="keyword">AS</span> student1</span><br><span class="line"><span class="comment">-- 增加表的字段  ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，修改约束）</span></span><br><span class="line"><span class="comment">-- 修改约束 ALTER TABLE 表名 MODIFY 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="comment">-- 字段重命名 ALTER TABLE 表名 CHANGE 新字段名 旧字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 CHANGE age age1 <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- 删除表的字段 ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>

<p>最终结论：</p>
<ul>
<li>change用来字段重命名，不能修改字段类型和约束</li>
<li>modify不用来字段重命名，只能修改字段类型和约束</li>
</ul>
<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student </span><br></pre></td></tr></table></figure>



<h2 id="3-数据管理"><a href="#3-数据管理" class="headerlink" title="3.数据管理"></a>3.数据管理</h2><h3 id="3-1-外键（了解即可）"><a href="#3-1-外键（了解即可）" class="headerlink" title="3.1 外键（了解即可）"></a>3.1 外键（了解即可）</h3><blockquote>
<p>第一种创建外键的方法</p>
</blockquote>
<p>![image-20250316165211255](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316165211255.png)</p>
<hr>
<blockquote>
<p>第二种创建外键的方法</p>
</blockquote>
<p>![image-20250316165252800](E:\hobby\Hexo Blog\blog\source_posts\MySQLday1.assets\image-20250316165252800.png)</p>
<hr>
<blockquote>
<p>不建议使用物理外键，也就是数据库级别的外键，容易造成表互相关联，不易删除</p>
<p>想使用外键关联多张表查数据，依靠程序来完成</p>
</blockquote>
<h3 id="3-2-DML语言（全部记住）"><a href="#3-2-DML语言（全部记住）" class="headerlink" title="3.2 DML语言（全部记住）"></a>3.2 DML语言（全部记住）</h3><blockquote>
<p>数据库管理语言</p>
</blockquote>
<p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言 ：数据操作语言</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="3-3-添加-insert"><a href="#3-3-添加-insert" class="headerlink" title="3.3 添加(insert)"></a>3.3 添加(insert)</h3><blockquote>
<p>insert命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句（增）</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名` (`字段名`) VALUES(&#x27;值&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`) <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO `student` (`字段名1`,`字段名2`) VALUES(&#x27;字段名1的值&#x27;,&#x27;字段名2的值&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果省略字段名就会一一匹配</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个字段，一般采用以下写法，方便观察</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 同时插入多个字段的多个值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Ego&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：</p>
<ul>
<li>字段之间使用英文逗号隔开</li>
<li>字段与值之间一一对应</li>
</ul>
</blockquote>
<h3 id="3-4-修改-update"><a href="#3-4-修改-update" class="headerlink" title="3.4 修改(update)"></a>3.4 修改(update)</h3><blockquote>
<p>updadte命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改语句（改）</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;ego&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不增加限制条件,会改动所有的表</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Ego&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性，逗号隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;ego&#x27;</span>, gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">UPDATE</span> `表名` <span class="keyword">SET</span> colnum_name <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span> <span class="keyword">where</span> [条件]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>where字句中的运算符id关系</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td></td>
<td>6&#x3D;6</td>
<td>true</td>
</tr>
<tr>
<td align="center">&lt;&gt; or !&#x3D;</td>
<td></td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">BETWEEN…AND…</td>
<td>在某个范围内</td>
<td>[4,10]</td>
<td></td>
</tr>
<tr>
<td align="center">AND</td>
<td>&amp;&amp;</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">OR</td>
<td>||</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>总结：</p>
<ul>
<li>多个属性之间一定要使用逗号隔开</li>
</ul>
</blockquote>
<h3 id="3-5-删除-delete"><a href="#3-5-删除-delete" class="headerlink" title="3.5 删除(delete)"></a>3.5 删除(delete)</h3><blockquote>
<p>delete命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 避免使用，会删除所有的内容</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="comment">-- 删除指定的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：完全清空一个数据库表，表的结构和索引约束不会改变</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空student表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`</span><br></pre></td></tr></table></figure>



<blockquote>
<p>delete 与 TRUNCATE 的区别</p>
</blockquote>
<ul>
<li>相同点：都会删除数据，但是不破坏表结构</li>
<li>不同：<ul>
<li>重写设置 <strong>自增列</strong> 计数器会归零</li>
<li>不会影响事务</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MySQLDay2</title>
    <url>/2025/03/17/MySQLDay2/</url>
    <content><![CDATA[<h2 id="4-DQL查询数据（最最重要的部分）"><a href="#4-DQL查询数据（最最重要的部分）" class="headerlink" title="4. DQL查询数据（最最重要的部分）"></a>4. DQL查询数据（最最重要的部分）</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1 DQL"></a>4.1 DQL</h3><blockquote>
<p>(Date Query Language:数据查询语言)</p>
</blockquote>
<ul>
<li>所有的查询操作都使用它 <strong>select</strong></li>
<li>简单的查询或者复杂的查询都依赖它</li>
<li>数据库中最核心的语言，使用频率最高</li>
</ul>
<h3 id="4-2-指定字段查询（简单查询）"><a href="#4-2-指定字段查询（简单查询）" class="headerlink" title="4.2 指定字段查询（简单查询）"></a>4.2 指定字段查询（简单查询）</h3><blockquote>
<p><strong>简单查询</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `id`,`name` <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起别名，常用于列名或者表名不能见名知意</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> <span class="string">&#x27;ID&#x27;</span> ,`name` <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b),将两个部分拼接起来</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名:&#x27;</span>,`name`) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>



<blockquote>
<p>去重 <em><strong>distinct</strong></em></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询数据并且去重</span></span><br><span class="line"><span class="comment">-- 查询所有或者单一数据的时候会出现重复</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 使用distinct去除重复数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `name` <span class="keyword">FROM</span> `student`</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据库的列（表达式）：文本，列，函数，表达式  … </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br><span class="line"><span class="comment">-- 实现数学计算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">200</span><span class="operator">/</span><span class="number">25</span> <span class="keyword">AS</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="comment">-- 查看自增</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto_increment_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有id加一，更加便捷的处理数据</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> ID <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>



<h3 id="4-3-where-条件子句查询"><a href="#4-3-where-条件子句查询" class="headerlink" title="4.3 where 条件子句查询"></a>4.3 where 条件子句查询</h3><blockquote>
<p><strong>检索数据中符合条件的值</strong></p>
</blockquote>
<p>搜索的条件由一个或者多个表达式组成，结果为布尔值</p>
<blockquote>
<p>逻辑运算符：尽量使用英文</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>布尔值</th>
</tr>
</thead>
<tbody><tr>
<td>and   &amp;&amp;</td>
<td>a and b</td>
<td></td>
</tr>
<tr>
<td>or    ||</td>
<td>a or b</td>
<td></td>
</tr>
<tr>
<td>not   ！</td>
<td>not a</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id在2 - 3之间</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `id`<span class="operator">&gt;=</span><span class="number">2</span> <span class="keyword">AND</span> `id` <span class="operator">&lt;=</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了id = 4，都查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> `id` <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>布尔值</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果为null，true</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果为null，false</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>a between b and c</td>
<td>在b，c之间，true</td>
</tr>
<tr>
<td>LIKE</td>
<td>a like b</td>
<td>如果sql匹配，true</td>
</tr>
<tr>
<td>IN</td>
<td>a in (b,c,d…)</td>
<td>在b，c，d之间，true</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="comment">-- 查询名字带有e的id</span></span><br><span class="line"><span class="comment">-- like结合 %(匹配任意个数的字符)  _(匹配任意一个字符)</span></span><br><span class="line"><span class="comment">-- 查询英文不区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询开头为e的id，后面只跟着一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询开头为e的id，后面只跟着两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间带有g的名字,无法确认名字一定是三位</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;%g%&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student`</span><br><span class="line">(`id`,`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;aliya&#x27;</span>),(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;elysia&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN --</span></span><br><span class="line"><span class="comment">-- 查询id为2和3和5</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询性别为男，女的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `gender` <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-联表查询"><a href="#4-4-联表查询" class="headerlink" title="4.4 联表查询"></a>4.4 联表查询</h3><blockquote>
<p>七种joinlilun</p>
</blockquote>
<p>![image-20250317212609192](E:\hobby\Hexo Blog\blog\source_posts\MySQLDay2.assets\image-20250317212609192.png)</p>
<blockquote>
<p>常见的三种join</p>
</blockquote>
<p>![image-20250317213010887](E:\hobby\Hexo Blog\blog\source_posts\MySQLDay2.assets\image-20250317213010887.png)</p>
<hr>
<blockquote>
<p><em><strong>联表查询</strong></em></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 联表查询:确定使用的连接，然后找到连接点（两个表中相同的数据）</span></span><br><span class="line"><span class="comment">-- join on  连接查询</span></span><br><span class="line"><span class="comment">-- where  等值查询</span></span><br><span class="line"><span class="comment">-- INNER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">WHERE</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN 使用 ON 和 WHERE 是一样的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">ON</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN 使用 ON 和 WHERE 是一样的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">ON</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 思路：</span></span><br><span class="line"><span class="comment">-- 我要查询什么数据</span></span><br><span class="line"><span class="comment">-- 我要从那两个表中开始查</span></span><br><span class="line"><span class="comment">-- 确定连接点</span></span><br><span class="line"><span class="comment">-- 确定查询操作</span></span><br><span class="line"><span class="comment">-- 先查两张表再继续，慢慢增加</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>三种查询的区别</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INNER JOIN</td>
<td align="center">表中有一个匹配就返回</td>
</tr>
<tr>
<td align="center">RIGHT JOIN</td>
<td align="center">会返回所有左表查询的信息，即使右表不匹配</td>
</tr>
<tr>
<td align="center">LEFT JOIN</td>
<td align="center">会返回所有右表查询的信息，即使左表不匹配</td>
</tr>
</tbody></table>
<h4 id="1-INNER-JOIN（内连接）"><a href="#1-INNER-JOIN（内连接）" class="headerlink" title="1. INNER JOIN（内连接）"></a>1. INNER JOIN（内连接）</h4><p>INNER JOIN用于返回两个表中匹配的行，即两个表中具有相同连接条件的记录会被组合在一起。如果某一行在其中一个表中存在，但在另一个表中没有匹配的行，则该行不会出现在结果集中。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回两个表中匹配的行。</li>
<li>如果没有匹配的行，则不显示。</li>
<li>是最常用的连接类型。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>假设我们有两个表：<code>Customer</code> 和 <code>Orders</code>，其中 <code>Customer</code> 表包含客户信息，<code>Orders</code> 表包含订单信息。通过 <code>INNER JOIN</code> 可以获取每个客户的订单信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中只包含那些在两个表中都存在匹配记录的行。</p>
<h4 id="2-LEFT-JOIN（左连接）"><a href="#2-LEFT-JOIN（左连接）" class="headerlink" title="2. LEFT JOIN（左连接）"></a>2. LEFT JOIN（左连接）</h4><p>LEFT JOIN（也称为左外连接）返回左表（即在 <code>JOIN</code> 关键字左侧的表）的所有行，即使右表中没有匹配的行。如果右表中没有匹配的行，则结果集中右表的列会显示为 <code>NULL</code>。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回左表的所有行，即使右表中没有匹配的行。</li>
<li>如果右表中没有匹配的行，则右表的列显示为 <code>NULL</code>。</li>
<li>是一种包容性的连接方式。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>继续使用上面的 <code>Customer</code> 和 <code>Orders</code> 表，通过 <code>LEFT JOIN</code> 可以获取所有客户的信息，即使某些客户没有订单：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中会包含所有客户的姓名，即使某些客户没有订单，订单信息列会显示为 <code>NULL</code>。</p>
<h4 id="3-RIGHT-JOIN（右连接）"><a href="#3-RIGHT-JOIN（右连接）" class="headerlink" title="3. RIGHT JOIN（右连接）"></a>3. RIGHT JOIN（右连接）</h4><p>RIGHT JOIN（也称为右外连接）与 LEFT JOIN 类似，但它返回右表的所有行，即使左表中没有匹配的行。如果左表中没有匹配的行，则结果集中左表的列会显示为 <code>NULL</code>。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回右表的所有行，即使左表中没有匹配的行。</li>
<li>如果左表中没有匹配的行，则左表的列显示为 <code>NULL</code>。</li>
<li>是一种包容性的连接方式。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>使用相同的 <code>Customer</code> 和 <code>Orders</code> 表，通过 <code>RIGHT JOIN</code> 可以获取所有订单信息，即使某些订单没有客户信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中会包含所有订单信息，即使某些订单没有客户信息，客户信息列会显示为 <code>NULL</code>。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><strong>INNER JOIN</strong>：只返回两个表中匹配的行。</li>
<li><strong>LEFT JOIN</strong>：返回左表的所有行，即使右表中没有匹配的行。</li>
<li><strong>RIGHT JOIN</strong>：返回右表的所有行，即使左表中没有匹配的行。</li>
</ul>
<p>这三种连接类型的选择取决于具体的数据需求和查询目标。例如，如果需要确保左表中的所有记录都被包含，则应使用 LEFT JOIN；如果需要确保右表中的所有记录都被包含，则应使用 RIGHT JOIN。</p>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己的表连接，核心：<strong>将一张表拆分为两张表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br></pre></td></tr></table></figure>



<p>父类</p>
<table>
<thead>
<tr>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>5</td>
<td>美术设计</td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>PS技术</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
</tbody></table>
<p>操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>PS技术</td>
</tr>
<tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>MySQLday4</title>
    <url>/2025/03/18/MySQLday4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MySQLday3</title>
    <url>/2025/03/18/MySQLday3/</url>
    <content><![CDATA[<h3 id="4-5-分页和排序"><a href="#4-5-分页和排序" class="headerlink" title="4.5 分页和排序"></a>4.5 分页和排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页和排序</span></span><br><span class="line"><span class="comment">-- 关键字 ORDER BY</span></span><br><span class="line"><span class="comment">-- 升序 ASC     降序 DESC</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span>,a.pid,b.pid</span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b.pid <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="comment">-- 语法 LIMIT </span></span><br><span class="line"><span class="comment">-- LIMIT 0,5  起始页，一页的数据量</span></span><br><span class="line"><span class="comment">-- LIMIT 5,5  起始页，一页的数据量</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span>,a.pid,b.pid</span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b.pid <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">2</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>前端处理数据时会用到的数据公式：</strong></p>
<p>![image-20250318112444770](E:\hobby\Hexo Blog\blog\source_posts\MySQLday3.assets\image-20250318112444770.png)</p>
<hr>
<h3 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6 子查询"></a>4.6 子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- P23</span></span><br><span class="line"><span class="comment">-- 1.查询 高等数学-1 的所有考试结果（学号，科目编号，成绩），降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,r.`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.使用子查询(由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,r.`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> `subjectno` <span class="operator">=</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> `subjectno` <span class="keyword">FROM</span> `subject`</span><br><span class="line">		<span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学高数1 的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectno` <span class="keyword">FROM</span> `subject`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-7-分组查询"><a href="#4-7-分组查询" class="headerlink" title="4.7 分组查询"></a>4.7 分组查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的品均分，最高分和最低分，平均分大于80</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectname`, <span class="built_in">AVG</span>(studentresult) <span class="keyword">AS</span> 平均分, <span class="built_in">MAX</span>(studentresult) <span class="keyword">AS</span> 最高分,<span class="built_in">MIN</span>(studentresult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.`subjectno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过什么字段来分组</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.`subjectno`  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于存在GROUP BY，不能使用where，使用having，having不限制使用次数</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分<span class="operator">&gt;</span><span class="number">80</span></span><br></pre></td></tr></table></figure>



<h3 id="4-8-select小结"><a href="#4-8-select小结" class="headerlink" title="4.8 select小结"></a>4.8 select小结</h3><blockquote>
<p>以后的查询中可能不只有联表查询，还会存在跨数据库查询，比如有关联的数据存储在MySQL，无关联的数据，像图片，存储在MongoDB数据库中</p>
</blockquote>
<h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5. MySQL函数"></a>5. MySQL函数</h2><h3 id="5-1-不用练习的常用函数"><a href="#5-1-不用练习的常用函数" class="headerlink" title="5.1 不用练习的常用函数"></a>5.1 不用练习的常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>+++</p>
<h3 id="5-2-聚合函数"><a href="#5-2-聚合函数" class="headerlink" title="5.2 聚合函数"></a>5.2 聚合函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>计数</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- COUNT(*) 和 COUNT(1) 在大多数情况下是等效的，它们都统计了查询结果的行数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`subjectname`) <span class="keyword">FROM</span> `subject`   <span class="comment">-- 会忽略所有的null值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `subject`               <span class="comment">-- 不会忽略null值  本质是计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> `subject`               <span class="comment">-- 不会忽略null值  本质是计算行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-数据库级别的MD5加密"><a href="#5-3-数据库级别的MD5加密" class="headerlink" title="5.3 数据库级别的MD5加密"></a>5.3 数据库级别的MD5加密</h3><hr>
<p>![image-20250318124246680](E:\hobby\Hexo Blog\blog\source_posts\MySQLday3.assets\image-20250318124246680.png)</p>
<hr>
<p>MD5（Message-Digest Algorithm 5）是一种广泛使用的哈希算法，由美国密码学家Ron Rivest于1991年设计开发。其主要功能是将任意长度的输入数据（如文本、文件等）转换为一个固定长度的128位（32个十六进制字符）哈希值，通常用于数据完整性校验、密码存储和数字签名等领域。</p>
<h4 id="MD5的特点"><a href="#MD5的特点" class="headerlink" title="MD5的特点"></a>MD5的特点</h4><ol>
<li><strong>固定长度输出</strong>：无论输入数据的长度如何，MD5都会生成一个固定长度的128位哈希值。</li>
<li><strong>不可逆性</strong>：MD5是单向哈希函数，即无法从哈希值反向推导出原始数据。</li>
<li><strong>抗修改性</strong>：对输入数据的任何微小改动都会导致生成完全不同的哈希值。</li>
<li><strong>抗碰撞性</strong>：尽管存在碰撞攻击的可能性，但在实际应用中，找到两个不同输入产生相同哈希值的概率非常低。</li>
</ol>
<h4 id="MD5的应用"><a href="#MD5的应用" class="headerlink" title="MD5的应用"></a>MD5的应用</h4><ol>
<li><strong>数据完整性校验</strong>：通过比较文件的MD5值，可以检测文件是否被篡改或损坏。</li>
<li><strong>密码存储</strong>：MD5常用于存储用户密码的哈希值，以保护用户隐私。</li>
<li><strong>数字签名</strong>：MD5可以用于生成数字签名，确保数据的完整性和来源的真实性。</li>
<li><strong>网络安全</strong>：在防病毒软件中，MD5用于检测文件是否被修改或感染。</li>
</ol>
<h4 id="MD5的安全性问题"><a href="#MD5的安全性问题" class="headerlink" title="MD5的安全性问题"></a>MD5的安全性问题</h4><p>尽管MD5曾被广泛应用于多个领域，但其安全性已逐渐受到质疑：</p>
<ol>
<li><strong>碰撞攻击</strong>：研究表明，通过特定算法可以找到两个不同的输入产生相同的MD5哈希值，这使得MD5在某些场景下不再安全。</li>
<li><strong>弱抗碰撞攻击</strong>：虽然强抗碰撞攻击较为困难，但弱抗碰撞攻击已经可以通过暴力破解实现。</li>
<li><strong>法律合规性问题</strong>：由于MD5的安全性不足，某些国家或地区和地区已禁止其用于敏感数据的加密。</li>
</ol>
<h4 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h4><p>鉴于MD5的安全性问题，现代应用中更倾向于使用SHA-256等更安全的哈希算法。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>MD5是一种经典的哈希算法，具有快速计算、固定长度输出和不可逆性等特点，曾广泛应用于数据完整性校验、密码存储和数字签名等领域。然而，由于其存在碰撞攻击和安全性不足的问题，目前已被许多场景所弃用，推荐使用更安全的哈希算法如SHA-256。</p>
<hr>
<h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.  事务"></a>6.  事务</h2><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1 什么是事务"></a>6.1 什么是事务</h3><p>&#x3D;&#x3D;要么都成功，要么都失败,下面两个语句要么都失败，要么都成功，在一个批次共同完成&#x3D;&#x3D;</p>
<hr>
<ol>
<li>SQL执行   A：1000  B：500  A——》B：200</li>
<li>SQL执行  B收到A的钱  A:800  B:700</li>
</ol>
<hr>
<blockquote>
<p>&#x3D;&#x3D;事务原则&#x3D;&#x3D; ：ACID原则</p>
</blockquote>
<h4 id="1-原子性（Atomicity）"><a href="#1-原子性（Atomicity）" class="headerlink" title="1. 原子性（Atomicity）"></a>1. 原子性（Atomicity）</h4><p>原子性要求事务作为一个不可分割的整体执行。如果事务中的任何操作失败，整个事务将被回滚，确保数据不会处于部分完成的状态。例如，在银行转账中，如果转账操作因网络问题失败，系统会自动撤销已执行的操作，确保账户余额保持一致。</p>
<ul>
<li><strong>实现方式</strong>：通过事务控制语句（如<code>BEGIN TRANSACTION</code>和<code>ROLLBACK</code>）来管理事务的开始和结束。如果事务中的任何操作失败，系统会自动回滚到事务开始前的状态。</li>
</ul>
<h4 id="2-一致性（Consistency）"><a href="#2-一致性（Consistency）" class="headerlink" title="2. 一致性（Consistency）"></a>2. 一致性（Consistency）</h4><p>一致性确保事务将数据库从一个一致状态转换到另一个一致状态。事务必须遵守预定义的规则和约束，以保持数据的完整性和准确性。例如，在更新客户信息时，必须确保所有字段符合业务规则（如年龄不能为负数）。</p>
<ul>
<li><strong>实现方式</strong>：通过约束条件（如外键、唯一性约束）和触发器来维护数据的一致性。事务完成后，数据库的状态必须满足所有约束条件。</li>
</ul>
<h4 id="3-隔离性（Isolation）"><a href="#3-隔离性（Isolation）" class="headerlink" title="3. 隔离性（Isolation）"></a>3. 隔离性（Isolation）</h4><p>隔离性确保并发执行的事务之间相互独立，不会受到其他事务的影响。例如，在多用户同时更新同一张表时，每个事务都应独立运行，不会干扰其他事务的结果。</p>
<ul>
<li><strong>实现方式</strong>：通过锁机制（如行级锁、表级锁）和并发控制算法（如MVCC）来实现事务的隔离性。这些机制可以防止数据冲突和脏读。</li>
</ul>
<h4 id="4-持久性（Durability）"><a href="#4-持久性（Durability）" class="headerlink" title="4. 持久性（Durability）"></a>4. 持久性（Durability）</h4><p>持久性要求事务完成后，所做的更改永久保存在数据库中，即使系统发生故障也不会丢失数据。例如，在提交支付交易后，数据必须被写入磁盘或日志文件，以确保在系统崩溃后仍能恢复。</p>
<ul>
<li><strong>实现方式</strong>：通过日志记录（如redo log）和备份机制来保证数据的持久性。事务完成后，系统会将更改永久存储到磁盘上，确保数据的安全性。</li>
</ul>
<blockquote>
<p>隔离产生的问题</p>
</blockquote>
<p>隔离性虽然能够保证事务的独立性和一致性，但在高并发场景下，可能会引发一些问题：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong><br>脏读是指一个事务读取了另一个事务未提交的数据。如果未提交的事务最终回滚，则读取到的数据是无效的。例如，事务A修改了某个记录但未提交，事务B读取了该记录并基于此做出决策，但后来事务A回滚，事务B的操作就会基于错误的数据。</li>
<li><strong>不可重复读（Non-Repeatable Read）</strong><br>不可重复读是指在一个事务内多次读取同一数据时，结果可能不同。例如，事务A第一次读取某个记录后，事务B修改了该记录并提交，事务A再次读取时会得到不同的结果。（这个不一定是错误，只是某些场合不对）</li>
<li><strong>幻读（Phantom Read）</strong><br>幻读是指在一个事务内两次执行相同的查询条件时，返回的结果集不同。例如，事务A查询某个范围内的记录后，事务B插入了一条新记录并提交，事务A再次查询时会发现多了一条记录。</li>
</ol>
<h4 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h4><blockquote>
<p>执行事务</p>
</blockquote>
<hr>
<p>![image-20250318153309134](E:\hobby\Hexo Blog\blog\source_posts\MySQLday3.assets\image-20250318153309134.png)</p>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span> <span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 开启（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理业务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  <span class="comment">-- 标记一个事务的开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>    <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">--  设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名    <span class="comment">-- 撤销保存点 </span></span><br></pre></td></tr></table></figure>



<h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7. 索引"></a>7. 索引</h2><blockquote>
<p>MySQL官方对索引的定义为：索引是帮助MySQL高效获取数据的数据结构。索引的本质是一种特定的数据结构，通常以B-Tree的形式存储，能够满足特定的查找算法。索引可以看作是一个逻辑上有序的列表，其中存储着索引值及其对应的物理地址或逻辑指针。</p>
</blockquote>
<h3 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1 索引的分类"></a>7.1 索引的分类</h3><blockquote>
<p>在一个表中，主键索引只能存在一个，唯一索引可以存在多个</p>
</blockquote>
<ul>
<li><p>主键索引（PRIMARY KEY）</p>
<ul>
<li>唯一的标识，主键不可以重复，只有一个列（字段）作为主键</li>
</ul>
</li>
<li><p>唯一索引（UNIQUE KEY）</p>
<ul>
<li>避免重复的列出现，唯一索引可以重复，可以有多个列作为唯一索引</li>
</ul>
</li>
<li><p>常规索引（KEY&#x2F;INDEX）</p>
<ul>
<li>默认的</li>
</ul>
</li>
<li><p>全文索引（FullText）</p>
<ul>
<li>在特定的数据库引擎下</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.创建表的时候给字段添加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引（索引名）  列名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> school.student <span class="keyword">ADD</span> FULLTEXT `studentname`(`studentname`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析SQL执行的情况</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) against(<span class="string">&#x27;刘&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h3 id="7-2-测试索引"><a href="#7-2-测试索引" class="headerlink" title="7.2 测试索引"></a>7.2 测试索引</h3><blockquote>
<p>索引在小数据量的时候不明显，但是当数据量十分大的时候，区别十分明显</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;&#x27;</span> COMMENT<span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT<span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;&#x27;</span> COMMENT<span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">`gender` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>COMMENT <span class="string">&#x27;性别（0：男;1:女）&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT <span class="operator">=</span> <span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 百万数据插入</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志:$$</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="comment">-- 注意returns，否则报错。</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="comment">-- num 作为截止数字，定义为百万，</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> num DO</span><br><span class="line"><span class="keyword">INSERT INTO</span> app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)</span><br><span class="line"><span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>, i), CONCAT(<span class="string">&#x27;100&#x27;</span>,i,<span class="string">&#x27;@qq.com&#x27;</span>), CONCAT(<span class="string">&#x27;13&#x27;</span>, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>(<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>)),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(), <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据多的时候查询会明显的变慢，因为会遍历所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- id_表名_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段)</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> app_user(`name`)</span><br><span class="line"><span class="comment">-- 再次查询时，因为存在索引只会查询一条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>![image-20250318213935648](E:\hobby\Hexo Blog\blog\source_posts\MySQLday3.assets\image-20250318213935648.png)</p>
<hr>
<h3 id="7-3-索引原则"><a href="#7-3-索引原则" class="headerlink" title="7.3 索引原则"></a>7.3 索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对进程变动数据加索引</li>
<li>小数据量的表无需添加索引</li>
<li>索引一般加在常用查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash 类型的索引</p>
<p>Btree：InnoDB的默认数据结构</p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>MySqlDayEnd</title>
    <url>/2025/03/21/MySQLdayEnd/</url>
    <content><![CDATA[<p>![image-20250316092404391](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316092404391.png)</p>
<h2 id="1-初始MySql"><a href="#1-初始MySql" class="headerlink" title="1.初始MySql"></a>1.初始MySql</h2><ol>
<li><p>数据库是连接前后端的桥梁，负责存储数据</p>
</li>
<li><p>MySql是一种关系数据库(Relationship Database)</p>
</li>
<li><p>数据库分为关系数据库(SQL)（MySql，Oracle）和非关系数据库(NoSQL,Not Only SQL)（Redis，MongDB）</p>
</li>
<li><p>DBMS和DB的关系</p>
</li>
</ol>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><blockquote>
<p>命令行，也就是<em><strong>命令窗口连接数据库</strong></em></p>
<p><strong>基本的sql操作</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>proot  <span class="comment">--连接数据库，-p后面跟着的是密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改用户密码</span></span><br><span class="line"></span><br><span class="line">flush privileges  <span class="comment">--刷新用户权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有语句都使用；结尾，sql语句允许换行输入查询</span></span><br><span class="line"><span class="keyword">show</span> database;  <span class="comment">--查看所有数据库</span></span><br><span class="line"></span><br><span class="line">use school;  <span class="comment">--切换数据库为school</span></span><br><span class="line"></span><br><span class="line">Database changed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;  <span class="comment">--查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student;  <span class="comment">--显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database teacher;  <span class="comment">--创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit;  <span class="comment">--推出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><em><strong>DDL  定义</strong></em></p>
<p><em><strong>DML  操作</strong></em></p>
<p><em><strong>DQL  查询</strong></em></p>
<p><em><strong>DCL  控制</strong></em></p>
<h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><h3 id="2-1操作数据库（了解）"><a href="#2-1操作数据库（了解）" class="headerlink" title="2.1操作数据库（了解）"></a>2.1操作数据库（了解）</h3><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure>


</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  如果表名或者字段名是一个特殊字符时使用</span></span><br><span class="line">USE `cloudlibrary`;</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASE </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2数据库的数据类型"><a href="#2-2数据库的数据类型" class="headerlink" title="2.2数据库的数据类型"></a>2.2数据库的数据类型</h3><blockquote>
<p>基本类型</p>
</blockquote>
<ul>
<li><strong>int   标准整数     四个字节  常用</strong></li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li><strong>varchar   可变字符   0 - 65535  常用</strong></li>
</ul>
<blockquote>
<p>时间和日期</p>
</blockquote>
<ul>
<li><strong>datetime</strong>  <strong>常用</strong></li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<h3 id="2-3数据库的字段属性（重点）"><a href="#2-3数据库的字段属性（重点）" class="headerlink" title="2.3数据库的字段属性（重点）"></a>2.3数据库的字段属性（重点）</h3><p>![image-20250316115342383](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316115342383.png)</p>
<hr>
<ul>
<li>自增</li>
</ul>
<blockquote>
<p>主要作用于主键</p>
<p>可以设置步长</p>
</blockquote>
<ul>
<li>非空</li>
</ul>
<blockquote>
<p>设置非空后不填入数据会报错</p>
</blockquote>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  每一个表，都必须存在一下五个字段，未来做项目会使用，表示一个记录存在的意义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id         主键</span></span><br><span class="line"><span class="comment">`version`  乐观锁</span></span><br><span class="line"><span class="comment">is_delete  伪删除</span></span><br><span class="line"><span class="comment">gmt_create 创建时间</span></span><br><span class="line"><span class="comment">gmt_update 修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4创建数据库表（重点）"><a href="#2-4创建数据库表（重点）" class="headerlink" title="2.4创建数据库表（重点）"></a>2.4创建数据库表（重点）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个数据库school</span></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="comment">--  学号int，登陆密码，姓名，性别，出生日期，家庭住址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用英文括号，表名 和 字段名 最好使用``括起来</span></span><br><span class="line"><span class="comment">-- navicat自增在设置主键的时候设置</span></span><br><span class="line"><span class="comment">-- 字符串使用&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加, 最后一个不加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY(`id`),一般一个表只有一个</span></span><br><span class="line"><span class="comment">-- CREATE DATABASE IF NOT EXISTS `school`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `student`(</span><br><span class="line">		`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">		`name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">		`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">		`gender` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">		`address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">		`email` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">		<span class="keyword">PRIMARY KEY</span>(`id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `表名`(</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">......</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span> 列类型 [属性] [索引] [注释]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `school`  <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> `student`  <span class="comment">-- 查看创建表的语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> student  <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5数据表的类型"><a href="#2-5数据表的类型" class="headerlink" title="2.5数据表的类型"></a>2.5数据表的类型</h3><blockquote>
<p>物理空间存储的位置都在data目录下，本质还是文件的存储</p>
</blockquote>
<p>![image-20250316160615846](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316160615846.png)</p>
<hr>
<p>![image-20250316160638048](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316160638048.png)</p>
<hr>
<h3 id="2-6修改删除表"><a href="#2-6修改删除表" class="headerlink" title="2.6修改删除表"></a>2.6修改删除表</h3><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名 ALTER TABLE 表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student RENAME <span class="keyword">AS</span> student1</span><br><span class="line"><span class="comment">-- 增加表的字段  ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，修改约束）</span></span><br><span class="line"><span class="comment">-- 修改约束 ALTER TABLE 表名 MODIFY 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="comment">-- 字段重命名 ALTER TABLE 表名 CHANGE 新字段名 旧字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 CHANGE age age1 <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- 删除表的字段 ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> student1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>

<p>最终结论：</p>
<ul>
<li>change用来字段重命名，不能修改字段类型和约束</li>
<li>modify不用来字段重命名，只能修改字段类型和约束</li>
</ul>
<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student </span><br></pre></td></tr></table></figure>



<h2 id="3-数据管理"><a href="#3-数据管理" class="headerlink" title="3.数据管理"></a>3.数据管理</h2><h3 id="3-1-外键（了解即可）"><a href="#3-1-外键（了解即可）" class="headerlink" title="3.1 外键（了解即可）"></a>3.1 外键（了解即可）</h3><blockquote>
<p>第一种创建外键的方法</p>
</blockquote>
<p>![image-20250316165211255](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316165211255.png)</p>
<hr>
<blockquote>
<p>第二种创建外键的方法</p>
</blockquote>
<p>![image-20250316165252800](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250316165252800.png)</p>
<hr>
<blockquote>
<p>不建议使用物理外键，也就是数据库级别的外键，容易造成表互相关联，不易删除</p>
<p>想使用外键关联多张表查数据，依靠程序来完成</p>
</blockquote>
<h3 id="3-2-DML语言（全部记住）"><a href="#3-2-DML语言（全部记住）" class="headerlink" title="3.2 DML语言（全部记住）"></a>3.2 DML语言（全部记住）</h3><blockquote>
<p>数据库管理语言</p>
</blockquote>
<p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言 ：数据操作语言</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="3-3-添加-insert"><a href="#3-3-添加-insert" class="headerlink" title="3.3 添加(insert)"></a>3.3 添加(insert)</h3><blockquote>
<p>insert命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句（增）</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名` (`字段名`) VALUES(&#x27;值&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`) <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO `student` (`字段名1`,`字段名2`) VALUES(&#x27;字段名1的值&#x27;,&#x27;字段名2的值&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果省略字段名就会一一匹配</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个字段，一般采用以下写法，方便观察</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 同时插入多个字段的多个值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student` (`id`,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;ego&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Ego&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：</p>
<ul>
<li>字段之间使用英文逗号隔开</li>
<li>字段与值之间一一对应</li>
</ul>
</blockquote>
<h3 id="3-4-修改-update"><a href="#3-4-修改-update" class="headerlink" title="3.4 修改(update)"></a>3.4 修改(update)</h3><blockquote>
<p>updadte命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改语句（改）</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;ego&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不增加限制条件,会改动所有的表</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Ego&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性，逗号隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;ego&#x27;</span>, gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">UPDATE</span> `表名` <span class="keyword">SET</span> colnum_name <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span> <span class="keyword">where</span> [条件]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>where字句中的运算符id关系</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td></td>
<td>6&#x3D;6</td>
<td>true</td>
</tr>
<tr>
<td align="center">&lt;&gt; or !&#x3D;</td>
<td></td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">BETWEEN…AND…</td>
<td>在某个范围内</td>
<td>[4,10]</td>
<td></td>
</tr>
<tr>
<td align="center">AND</td>
<td>&amp;&amp;</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">OR</td>
<td>||</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>总结：</p>
<ul>
<li>多个属性之间一定要使用逗号隔开</li>
</ul>
</blockquote>
<h3 id="3-5-删除-delete"><a href="#3-5-删除-delete" class="headerlink" title="3.5 删除(delete)"></a>3.5 删除(delete)</h3><blockquote>
<p>delete命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 避免使用，会删除所有的内容</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="comment">-- 删除指定的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：完全清空一个数据库表，表的结构和索引约束不会改变</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空student表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`</span><br></pre></td></tr></table></figure>



<blockquote>
<p>delete 与 TRUNCATE 的区别</p>
</blockquote>
<ul>
<li>相同点：都会删除数据，但是不破坏表结构</li>
<li>不同：<ul>
<li>重写设置 <strong>自增列</strong> 计数器会归零</li>
<li>不会影响事务</li>
</ul>
</li>
</ul>
<h2 id="4-DQL查询数据（最最重要的部分）"><a href="#4-DQL查询数据（最最重要的部分）" class="headerlink" title="4. DQL查询数据（最最重要的部分）"></a>4. DQL查询数据（最最重要的部分）</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1 DQL"></a>4.1 DQL</h3><blockquote>
<p>(Date Query Language:数据查询语言)</p>
</blockquote>
<ul>
<li>所有的查询操作都使用它 <strong>select</strong></li>
<li>简单的查询或者复杂的查询都依赖它</li>
<li>数据库中最核心的语言，使用频率最高</li>
</ul>
<h3 id="4-2-指定字段查询（简单查询）"><a href="#4-2-指定字段查询（简单查询）" class="headerlink" title="4.2 指定字段查询（简单查询）"></a>4.2 指定字段查询（简单查询）</h3><p>![image-20250318111102366](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318111102366.png)</p>
<hr>
<blockquote>
<p><strong>简单查询</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `id`,`name` <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起别名，常用于列名或者表名不能见名知意</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> <span class="string">&#x27;ID&#x27;</span> ,`name` <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b),将两个部分拼接起来</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名:&#x27;</span>,`name`) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>



<blockquote>
<p>去重 <em><strong>distinct</strong></em></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询数据并且去重</span></span><br><span class="line"><span class="comment">-- 查询所有或者单一数据的时候会出现重复</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 使用distinct去除重复数据</span></span><br><span class="line"><span class="comment">-- 默认为ALL查询所有,使用DISTINCT去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `name` <span class="keyword">FROM</span> `student`</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据库的列（表达式）：文本，列，函数，表达式  … </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br><span class="line"><span class="comment">-- 实现数学计算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">200</span><span class="operator">/</span><span class="number">25</span> <span class="keyword">AS</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="comment">-- 查看自增</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto_increment_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有id加一，更加便捷的处理数据</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> ID <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>



<h3 id="4-3-where-条件子句查询"><a href="#4-3-where-条件子句查询" class="headerlink" title="4.3 where 条件子句查询"></a>4.3 where 条件子句查询</h3><blockquote>
<p><strong>检索数据中符合条件的值</strong></p>
</blockquote>
<p>搜索的条件由一个或者多个表达式组成，结果为布尔值</p>
<blockquote>
<p>逻辑运算符：尽量使用英文</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>布尔值</th>
</tr>
</thead>
<tbody><tr>
<td>and   &amp;&amp;</td>
<td>a and b</td>
<td></td>
</tr>
<tr>
<td>or    ||</td>
<td>a or b</td>
<td></td>
</tr>
<tr>
<td>not   ！</td>
<td>not a</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id在2 - 3之间</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `id`<span class="operator">&gt;=</span><span class="number">2</span> <span class="keyword">AND</span> `id` <span class="operator">&lt;=</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了id = 4，都查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> `id` <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>布尔值</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果为null，true</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果为null，false</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>a between b and c</td>
<td>在b，c之间，true</td>
</tr>
<tr>
<td>LIKE</td>
<td>a like b</td>
<td>如果sql匹配，true</td>
</tr>
<tr>
<td>IN</td>
<td>a in (b,c,d…)</td>
<td>在b，c，d之间，true</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="comment">-- 查询名字带有e的id</span></span><br><span class="line"><span class="comment">-- like结合 %(匹配任意个数的字符)  _(匹配任意一个字符)</span></span><br><span class="line"><span class="comment">-- 查询英文不区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询开头为e的id，后面只跟着一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询开头为e的id，后面只跟着两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;e__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间带有g的名字,无法确认名字一定是三位</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;%g%&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `student`</span><br><span class="line">(`id`,`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;aliya&#x27;</span>),(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;elysia&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN --</span></span><br><span class="line"><span class="comment">-- 查询id为2和3和5</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `id` <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询性别为男，女的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `gender` <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-联表查询"><a href="#4-4-联表查询" class="headerlink" title="4.4 联表查询"></a>4.4 联表查询</h3><blockquote>
<p>七种join理论</p>
</blockquote>
<p>![image-20250317212609192](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250317212609192.png)</p>
<blockquote>
<p>只需要使用常见的三种join</p>
</blockquote>
<p>![image-20250317213010887](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250317213010887.png)</p>
<hr>
<blockquote>
<p><em><strong>联表查询</strong></em></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 联表查询:确定使用的连接，然后找到连接点（两个表中相同的数据）</span></span><br><span class="line"><span class="comment">-- join on  连接查询</span></span><br><span class="line"><span class="comment">-- where  等值查询</span></span><br><span class="line"><span class="comment">-- INNER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">WHERE</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN 使用 ON 和 WHERE 是一样的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">ON</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN 使用 ON 和 WHERE 是一样的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentNO,studentNAME,subjectNO</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r </span><br><span class="line"><span class="keyword">ON</span> s.studentNO <span class="operator">=</span> r.studentNO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 思路：</span></span><br><span class="line"><span class="comment">-- 我要查询什么数据</span></span><br><span class="line"><span class="comment">-- 我要从那两个表中开始查</span></span><br><span class="line"><span class="comment">-- 确定连接点</span></span><br><span class="line"><span class="comment">-- 确定查询操作</span></span><br><span class="line"><span class="comment">-- 先查两张表再继续，慢慢增加</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>三种查询的区别</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INNER JOIN</td>
<td align="center">表中有一个匹配就返回</td>
</tr>
<tr>
<td align="center">RIGHT JOIN</td>
<td align="center">会返回所有左表查询的信息，即使右表不匹配</td>
</tr>
<tr>
<td align="center">LEFT JOIN</td>
<td align="center">会返回所有右表查询的信息，即使左表不匹配</td>
</tr>
</tbody></table>
<h4 id="1-INNER-JOIN（内连接）"><a href="#1-INNER-JOIN（内连接）" class="headerlink" title="1. INNER JOIN（内连接）"></a>1. INNER JOIN（内连接）</h4><p>INNER JOIN用于返回两个表中匹配的行，即两个表中具有相同连接条件的记录会被组合在一起。如果某一行在其中一个表中存在，但在另一个表中没有匹配的行，则该行不会出现在结果集中。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回两个表中匹配的行。</li>
<li>如果没有匹配的行，则不显示。</li>
<li>是最常用的连接类型。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>假设我们有两个表：<code>Customer</code> 和 <code>Orders</code>，其中 <code>Customer</code> 表包含客户信息，<code>Orders</code> 表包含订单信息。通过 <code>INNER JOIN</code> 可以获取每个客户的订单信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中只包含那些在两个表中都存在匹配记录的行。</p>
<h4 id="2-LEFT-JOIN（左连接）"><a href="#2-LEFT-JOIN（左连接）" class="headerlink" title="2. LEFT JOIN（左连接）"></a>2. LEFT JOIN（左连接）</h4><p>LEFT JOIN（也称为左外连接）返回左表（即在 <code>JOIN</code> 关键字左侧的表）的所有行，即使右表中没有匹配的行。如果右表中没有匹配的行，则结果集中右表的列会显示为 <code>NULL</code>。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回左表的所有行，即使右表中没有匹配的行。</li>
<li>如果右表中没有匹配的行，则右表的列显示为 <code>NULL</code>。</li>
<li>是一种包容性的连接方式。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>继续使用上面的 <code>Customer</code> 和 <code>Orders</code> 表，通过 <code>LEFT JOIN</code> 可以获取所有客户的信息，即使某些客户没有订单：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中会包含所有客户的姓名，即使某些客户没有订单，订单信息列会显示为 <code>NULL</code>。</p>
<h4 id="3-RIGHT-JOIN（右连接）"><a href="#3-RIGHT-JOIN（右连接）" class="headerlink" title="3. RIGHT JOIN（右连接）"></a>3. RIGHT JOIN（右连接）</h4><p>RIGHT JOIN（也称为右外连接）与 LEFT JOIN 类似，但它返回右表的所有行，即使左表中没有匹配的行。如果左表中没有匹配的行，则结果集中左表的列会显示为 <code>NULL</code>。</p>
<ul>
<li><strong>特点</strong>：<ul>
<li>返回右表的所有行，即使左表中没有匹配的行。</li>
<li>如果左表中没有匹配的行，则左表的列显示为 <code>NULL</code>。</li>
<li>是一种包容性的连接方式。</li>
</ul>
</li>
<li><strong>语法</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>示例</strong>：<br>使用相同的 <code>Customer</code> 和 <code>Orders</code> 表，通过 <code>RIGHT JOIN</code> 可以获取所有订单信息，即使某些订单没有客户信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer.CustomerName, Orders.OrderID</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customer.CustomerID <span class="operator">=</span> Orders.CustomerID;</span><br></pre></td></tr></table></figure>

<p>结果集中会包含所有订单信息，即使某些订单没有客户信息，客户信息列会显示为 <code>NULL</code>。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><strong>INNER JOIN</strong>：只返回两个表中匹配的行。</li>
<li><strong>LEFT JOIN</strong>：返回左表的所有行，即使右表中没有匹配的行。</li>
<li><strong>RIGHT JOIN</strong>：返回右表的所有行，即使左表中没有匹配的行。</li>
</ul>
<p>这三种连接类型的选择取决于具体的数据需求和查询目标。例如，如果需要确保左表中的所有记录都被包含，则应使用 LEFT JOIN；如果需要确保右表中的所有记录都被包含，则应使用 RIGHT JOIN。</p>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己的表连接，核心：<strong>将一张表拆分为两张表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br></pre></td></tr></table></figure>



<p>父类</p>
<table>
<thead>
<tr>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>5</td>
<td>美术设计</td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>PS技术</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
</tbody></table>
<p>操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>PS技术</td>
</tr>
<tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
</tbody></table>
<p><strong>实际查询效果：</strong></p>
<p>![image-20250318110744854](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318110744854.png)</p>
<hr>
<h3 id="4-5-分页和排序"><a href="#4-5-分页和排序" class="headerlink" title="4.5 分页和排序"></a>4.5 分页和排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页和排序</span></span><br><span class="line"><span class="comment">-- 关键字 ORDER BY</span></span><br><span class="line"><span class="comment">-- 升序 ASC     降序 DESC</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span>,a.pid,b.pid</span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b.pid <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="comment">-- 语法 LIMIT </span></span><br><span class="line"><span class="comment">-- LIMIT 0,5  起始页，一页的数据量</span></span><br><span class="line"><span class="comment">-- LIMIT 5,5  起始页，一页的数据量</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;父类名&#x27;</span>,b.`categoryName` <span class="keyword">AS</span> <span class="string">&#x27;子类名&#x27;</span>,a.pid,b.pid</span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.categoryid <span class="operator">=</span> b.pid	</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b.pid <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">2</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>前端处理数据时会用到的数据公式：</strong></p>
<p>![image-20250318112444770](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318112444770.png)</p>
<hr>
<h3 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6 子查询"></a>4.6 子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- P23</span></span><br><span class="line"><span class="comment">-- 1.查询 高等数学-1 的所有考试结果（学号，科目编号，成绩），降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,r.`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.使用子查询(由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,r.`subjectno`,`studentresult`</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> `subjectno` <span class="operator">=</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> `subjectno` <span class="keyword">FROM</span> `subject`</span><br><span class="line">		<span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学高数1 的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectno` <span class="keyword">FROM</span> `subject`</span><br><span class="line"><span class="keyword">WHERE</span> `subjectname` <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-7-分组查询"><a href="#4-7-分组查询" class="headerlink" title="4.7 分组查询"></a>4.7 分组查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的品均分，最高分和最低分，平均分大于80</span></span><br><span class="line"><span class="keyword">SELECT</span> `subjectname`, <span class="built_in">AVG</span>(studentresult) <span class="keyword">AS</span> 平均分, <span class="built_in">MAX</span>(studentresult) <span class="keyword">AS</span> 最高分,<span class="built_in">MIN</span>(studentresult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.`subjectno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过什么字段来分组</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.`subjectno`  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于存在GROUP BY，不能使用where，使用having，having不限制使用次数</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分<span class="operator">&gt;</span><span class="number">80</span></span><br></pre></td></tr></table></figure>



<h3 id="4-8-select小结"><a href="#4-8-select小结" class="headerlink" title="4.8 select小结"></a>4.8 select小结</h3><blockquote>
<p>以后的查询中可能不只有联表查询，还会存在跨数据库查询，比如有关联的数据存储在MySQL，无关联的数据，像图片，存储在MongoDB数据库中</p>
</blockquote>
<h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5. MySQL函数"></a>5. MySQL函数</h2><h3 id="5-1-不用练习的常用函数"><a href="#5-1-不用练习的常用函数" class="headerlink" title="5.1 不用练习的常用函数"></a>5.1 不用练习的常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>+++</p>
<h3 id="5-2-聚合函数"><a href="#5-2-聚合函数" class="headerlink" title="5.2 聚合函数"></a>5.2 聚合函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>计数</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- COUNT(*) 和 COUNT(1) 在大多数情况下是等效的，它们都统计了查询结果的行数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`subjectname`) <span class="keyword">FROM</span> `subject`   <span class="comment">-- 会忽略所有的null值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `subject`               <span class="comment">-- 不会忽略null值  本质是计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> `subject`               <span class="comment">-- 不会忽略null值  本质是计算行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(studentresult) <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-数据库级别的MD5加密"><a href="#5-3-数据库级别的MD5加密" class="headerlink" title="5.3 数据库级别的MD5加密"></a>5.3 数据库级别的MD5加密</h3><hr>
<p>![image-20250318124246680](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318124246680.png)</p>
<hr>
<p>MD5（Message-Digest Algorithm 5）是一种广泛使用的哈希算法，由美国密码学家Ron Rivest于1991年设计开发。其主要功能是将任意长度的输入数据（如文本、文件等）转换为一个固定长度的128位（32个十六进制字符）哈希值，通常用于数据完整性校验、密码存储和数字签名等领域。</p>
<h4 id="MD5的特点"><a href="#MD5的特点" class="headerlink" title="MD5的特点"></a>MD5的特点</h4><ol>
<li><strong>固定长度输出</strong>：无论输入数据的长度如何，MD5都会生成一个固定长度的128位哈希值。</li>
<li><strong>不可逆性</strong>：MD5是单向哈希函数，即无法从哈希值反向推导出原始数据。</li>
<li><strong>抗修改性</strong>：对输入数据的任何微小改动都会导致生成完全不同的哈希值。</li>
<li><strong>抗碰撞性</strong>：尽管存在碰撞攻击的可能性，但在实际应用中，找到两个不同输入产生相同哈希值的概率非常低。</li>
</ol>
<h4 id="MD5的应用"><a href="#MD5的应用" class="headerlink" title="MD5的应用"></a>MD5的应用</h4><ol>
<li><strong>数据完整性校验</strong>：通过比较文件的MD5值，可以检测文件是否被篡改或损坏。</li>
<li><strong>密码存储</strong>：MD5常用于存储用户密码的哈希值，以保护用户隐私。</li>
<li><strong>数字签名</strong>：MD5可以用于生成数字签名，确保数据的完整性和来源的真实性。</li>
<li><strong>网络安全</strong>：在防病毒软件中，MD5用于检测文件是否被修改或感染。</li>
</ol>
<h4 id="MD5的安全性问题"><a href="#MD5的安全性问题" class="headerlink" title="MD5的安全性问题"></a>MD5的安全性问题</h4><p>尽管MD5曾被广泛应用于多个领域，但其安全性已逐渐受到质疑：</p>
<ol>
<li><strong>碰撞攻击</strong>：研究表明，通过特定算法可以找到两个不同的输入产生相同的MD5哈希值，这使得MD5在某些场景下不再安全。</li>
<li><strong>弱抗碰撞攻击</strong>：虽然强抗碰撞攻击较为困难，但弱抗碰撞攻击已经可以通过暴力破解实现。</li>
<li><strong>法律合规性问题</strong>：由于MD5的安全性不足，某些国家或地区和地区已禁止其用于敏感数据的加密。</li>
</ol>
<h4 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h4><p>鉴于MD5的安全性问题，现代应用中更倾向于使用SHA-256等更安全的哈希算法。</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>MD5是一种经典的哈希算法，具有快速计算、固定长度输出和不可逆性等特点，曾广泛应用于数据完整性校验、密码存储和数字签名等领域。然而，由于其存在碰撞攻击和安全性不足的问题，目前已被许多场景所弃用，推荐使用更安全的哈希算法如SHA-256。</p>
<hr>
<h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.  事务"></a>6.  事务</h2><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1 什么是事务"></a>6.1 什么是事务</h3><p>&#x3D;&#x3D;要么都成功，要么都失败,下面两个语句要么都失败，要么都成功，在一个批次共同完成&#x3D;&#x3D;</p>
<hr>
<ol>
<li>SQL执行   A：1000  B：500  A——》B：200</li>
<li>SQL执行  B收到A的钱  A:800  B:700</li>
</ol>
<hr>
<blockquote>
<p>&#x3D;&#x3D;事务原则&#x3D;&#x3D; ：ACID原则</p>
</blockquote>
<h4 id="1-原子性（Atomicity）"><a href="#1-原子性（Atomicity）" class="headerlink" title="1. 原子性（Atomicity）"></a>1. 原子性（Atomicity）</h4><p>原子性要求事务作为一个不可分割的整体执行。如果事务中的任何操作失败，整个事务将被回滚，确保数据不会处于部分完成的状态。例如，在银行转账中，如果转账操作因网络问题失败，系统会自动撤销已执行的操作，确保账户余额保持一致。</p>
<ul>
<li><strong>实现方式</strong>：通过事务控制语句（如<code>BEGIN TRANSACTION</code>和<code>ROLLBACK</code>）来管理事务的开始和结束。如果事务中的任何操作失败，系统会自动回滚到事务开始前的状态。</li>
</ul>
<h4 id="2-一致性（Consistency）"><a href="#2-一致性（Consistency）" class="headerlink" title="2. 一致性（Consistency）"></a>2. 一致性（Consistency）</h4><p>一致性确保事务将数据库从一个一致状态转换到另一个一致状态。事务必须遵守预定义的规则和约束，以保持数据的完整性和准确性。例如，在更新客户信息时，必须确保所有字段符合业务规则（如年龄不能为负数）。</p>
<ul>
<li><strong>实现方式</strong>：通过约束条件（如外键、唯一性约束）和触发器来维护数据的一致性。事务完成后，数据库的状态必须满足所有约束条件。</li>
</ul>
<h4 id="3-隔离性（Isolation）"><a href="#3-隔离性（Isolation）" class="headerlink" title="3. 隔离性（Isolation）"></a>3. 隔离性（Isolation）</h4><p>隔离性确保并发执行的事务之间相互独立，不会受到其他事务的影响。例如，在多用户同时更新同一张表时，每个事务都应独立运行，不会干扰其他事务的结果。</p>
<ul>
<li><strong>实现方式</strong>：通过锁机制（如行级锁、表级锁）和并发控制算法（如MVCC）来实现事务的隔离性。这些机制可以防止数据冲突和脏读。</li>
</ul>
<h4 id="4-持久性（Durability）"><a href="#4-持久性（Durability）" class="headerlink" title="4. 持久性（Durability）"></a>4. 持久性（Durability）</h4><p>持久性要求事务完成后，所做的更改永久保存在数据库中，即使系统发生故障也不会丢失数据。例如，在提交支付交易后，数据必须被写入磁盘或日志文件，以确保在系统崩溃后仍能恢复。</p>
<ul>
<li><strong>实现方式</strong>：通过日志记录（如redo log）和备份机制来保证数据的持久性。事务完成后，系统会将更改永久存储到磁盘上，确保数据的安全性。</li>
</ul>
<blockquote>
<p>隔离产生的问题</p>
</blockquote>
<p>隔离性虽然能够保证事务的独立性和一致性，但在高并发场景下，可能会引发一些问题：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong><br>脏读是指一个事务读取了另一个事务未提交的数据。如果未提交的事务最终回滚，则读取到的数据是无效的。例如，事务A修改了某个记录但未提交，事务B读取了该记录并基于此做出决策，但后来事务A回滚，事务B的操作就会基于错误的数据。</li>
<li><strong>不可重复读（Non-Repeatable Read）</strong><br>不可重复读是指在一个事务内多次读取同一数据时，结果可能不同。例如，事务A第一次读取某个记录后，事务B修改了该记录并提交，事务A再次读取时会得到不同的结果。（这个不一定是错误，只是某些场合不对）</li>
<li><strong>幻读（Phantom Read）</strong><br>幻读是指在一个事务内两次执行相同的查询条件时，返回的结果集不同。例如，事务A查询某个范围内的记录后，事务B插入了一条新记录并提交，事务A再次查询时会发现多了一条记录。</li>
</ol>
<h4 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h4><blockquote>
<p>执行事务</p>
</blockquote>
<hr>
<p>![image-20250318153309134](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318153309134.png)</p>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span> <span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 开启（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理业务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  <span class="comment">-- 标记一个事务的开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>    <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">--  设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名    <span class="comment">-- 撤销保存点 </span></span><br></pre></td></tr></table></figure>



<h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7. 索引"></a>7. 索引</h2><blockquote>
<p>MySQL官方对索引的定义为：索引是帮助MySQL高效获取数据的数据结构。索引的本质是一种特定的数据结构，通常以B-Tree的形式存储，能够满足特定的查找算法。索引可以看作是一个逻辑上有序的列表，其中存储着索引值及其对应的物理地址或逻辑指针。</p>
</blockquote>
<h3 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1 索引的分类"></a>7.1 索引的分类</h3><blockquote>
<p>在一个表中，主键索引只能存在一个，唯一索引可以存在多个</p>
</blockquote>
<ul>
<li><p>主键索引（PRIMARY KEY）</p>
<ul>
<li>唯一的标识，主键不可以重复，只有一个列（字段）作为主键</li>
</ul>
</li>
<li><p>唯一索引（UNIQUE KEY）</p>
<ul>
<li>避免重复的列出现，唯一索引可以重复，可以有多个列作为唯一索引</li>
</ul>
</li>
<li><p>常规索引（KEY&#x2F;INDEX）</p>
<ul>
<li>默认的</li>
</ul>
</li>
<li><p>全文索引（FullText）</p>
<ul>
<li>在特定的数据库引擎下</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.创建表的时候给字段添加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引（索引名）  列名</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> school.student <span class="keyword">ADD</span> FULLTEXT `studentname`(`studentname`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析SQL执行的情况</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) against(<span class="string">&#x27;刘&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h3 id="7-2-测试索引"><a href="#7-2-测试索引" class="headerlink" title="7.2 测试索引"></a>7.2 测试索引</h3><blockquote>
<p>索引在小数据量的时候不明显，但是当数据量十分大的时候，区别十分明显</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;&#x27;</span> COMMENT<span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT<span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;&#x27;</span> COMMENT<span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">`gender` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>COMMENT <span class="string">&#x27;性别（0：男;1:女）&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span><span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT <span class="operator">=</span> <span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 百万数据插入</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志:$$</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="comment">-- 注意returns，否则报错。</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="comment">-- num 作为截止数字，定义为百万，</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> num DO</span><br><span class="line"><span class="keyword">INSERT INTO</span> app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)</span><br><span class="line"><span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>, i), CONCAT(<span class="string">&#x27;100&#x27;</span>,i,<span class="string">&#x27;@qq.com&#x27;</span>), CONCAT(<span class="string">&#x27;13&#x27;</span>, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>(<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>)),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(), <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据多的时候查询会明显的变慢，因为会遍历所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- id_表名_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段)</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> app_user(`name`)</span><br><span class="line"><span class="comment">-- 再次查询时，因为存在索引只会查询一条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>![image-20250318213935648](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250318213935648.png)</p>
<hr>
<h3 id="7-3-索引原则"><a href="#7-3-索引原则" class="headerlink" title="7.3 索引原则"></a>7.3 索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对进程变动数据加索引</li>
<li>小数据量的表无需添加索引</li>
<li>索引一般加在常用查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash 类型的索引</p>
<p>Btree：InnoDB的默认数据结构</p>
<p>博客：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<h2 id="8-数据库备份和权限管理"><a href="#8-数据库备份和权限管理" class="headerlink" title="8. 数据库备份和权限管理"></a>8. 数据库备份和权限管理</h2><h3 id="8-1用户管理"><a href="#8-1用户管理" class="headerlink" title="8.1用户管理"></a>8.1用户管理</h3><blockquote>
<p>实现可视化操作：</p>
</blockquote>
<hr>
<p>![image-20250319085732596](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319085732596.png)</p>
<hr>
<blockquote>
<p>SQL命令操作：</p>
</blockquote>
<p>本质上是对MySQL数据库中的user表的操作，进行增删改查</p>
<hr>
<p>![image-20250319085957372](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319085957372.png)</p>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个用户，并且给创建的用户设置密码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> Ego IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码 （修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码 （修改指定用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> Ego <span class="operator">=</span> PASSWORD(<span class="string">&#x27;654321&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名  RENAME USER 原名字 TO 新名字</span></span><br><span class="line">RENAME <span class="keyword">USER</span> Ego <span class="keyword">TO</span> ego</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权 ALL PRIVILEGES 全部的权限 ， 库.表</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权的权限，其他权限都能赋予</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> ego</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ego   <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span></span><br><span class="line"><span class="comment">-- root用户权限</span></span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION</span></span><br><span class="line"><span class="comment">-- GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限 REVOKE 要撤销的权限 ， 在哪个库撤销，给谁撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> ego</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> ego</span><br></pre></td></tr></table></figure>



<h3 id="8-2-MySQL备份"><a href="#8-2-MySQL备份" class="headerlink" title="8.2 MySQL备份"></a>8.2 MySQL备份</h3><p>为什么要备份：</p>
<ul>
<li>保证重要的数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份的方式</p>
<ul>
<li><p>直接拷贝文件夹下的data文件，物理保存</p>
</li>
<li><p>在可视化工具如：navicat中导出，右键选择备份或导出</p>
</li>
<li><p>使用命令行导出 mysqldump 命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表1 表2 表3 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot school student student1 student 2&gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库&gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -proot school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入</span></span><br><span class="line"><span class="comment">#登录的情况下，切换到指定数据库</span></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="comment">#source 备份文件</span></span><br><span class="line"><span class="built_in">source</span> d:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没登陆的情况</span></span><br><span class="line">mysql -u用户名 -p密码 库名&lt; 备份文件</span><br></pre></td></tr></table></figure></li>
</ul>
<p><u><strong>什么时候使用</strong></u></p>
<ul>
<li>显得高大上</li>
<li>方便快捷</li>
</ul>
<h2 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9. 规范数据库设计"></a>9. 规范数据库设计</h2><blockquote>
<p>牢秦疆&#x3D;&#x3D;（P35）&#x3D;&#x3D;</p>
</blockquote>
<h3 id="9-1为什么需要设计数据库"><a href="#9-1为什么需要设计数据库" class="headerlink" title="9.1为什么需要设计数据库"></a>9.1为什么需要设计数据库</h3><p>&#x3D;&#x3D;当数据库的需求比较复杂时，需要设计数据库&#x3D;&#x3D;</p>
<p><strong>糟糕的数据库设计</strong>：</p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库的插入和删除都会十分麻烦，异常（屏蔽使用外键）</li>
<li>程序的性能问题</li>
</ul>
<p><strong>良好的数据库设计</strong>：</p>
<ul>
<li>节省内存的占用</li>
<li>保证数据库的完整性</li>
<li>方便我们开发系统</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需求：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图 E-R图</li>
</ul>
<p><strong>设计数据库的步骤</strong>：（个人博客）</p>
<hr>
<p>![image-20250319153938755](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319153938755.png)</p>
<hr>
<h3 id="9-2-三大范式"><a href="#9-2-三大范式" class="headerlink" title="9.2 三大范式"></a>9.2 三大范式</h3><blockquote>
<p><a href="https://www.cnblogs.com/wsg25/p/9615100.html">关系型数据库设计：三大范式的通俗理解 - 景寓6号 - 博客园</a></p>
</blockquote>
<hr>
<p>![image-20250319154942973](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319154942973.png)</p>
<hr>
<blockquote>
<p>&#x3D;&#x3D;<strong>三大范式</strong>（熟悉了解）&#x3D;&#x3D;</p>
</blockquote>
<hr>
<p>![image-20250319155835103](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319155835103.png)</p>
<hr>
<p><strong>（规范数据库的设计）</strong></p>
<hr>
<p>![image-20250319155955733](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319155955733.png)</p>
<hr>
<h2 id="10-JDBC"><a href="#10-JDBC" class="headerlink" title="10. JDBC"></a>10. JDBC</h2><h3 id="10-1数据库驱动"><a href="#10-1数据库驱动" class="headerlink" title="10.1数据库驱动"></a>10.1数据库驱动</h3><hr>
<p>![image-20250319160602050](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319160602050.png)</p>
<hr>
<p>通过数据库驱动对数据进行操作</p>
<h3 id="10-2-JDBC"><a href="#10-2-JDBC" class="headerlink" title="10.2 JDBC"></a>10.2 JDBC</h3><blockquote>
<p>JDBC的作用</p>
</blockquote>
<hr>
<p>![image-20250319160834083](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250319160834083.png)</p>
<hr>
<h3 id="10-3-第一个JDBC程序"><a href="#10-3-第一个JDBC程序" class="headerlink" title="10.3 第一个JDBC程序"></a>10.3 第一个JDBC程序</h3><blockquote>
<p>编写测试代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.jdbc;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqConnection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.建立连接,用户信息和url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象  Connection代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//4.执行sql语句，获取结果集对象statement 执行SQL对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//5.处理结果集，执行sql处理对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql); <span class="comment">// 使用完整的SQL语句</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span> + resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> + resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span> + resultSet.getObject(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span> + resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;==================================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>![image-20250320141015437](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320141015437.png)</p>
<hr>
<p><strong>步骤总结：</strong></p>
<ol>
<li>加载驱动</li>
<li>连接数据库 DriverManager</li>
<li>获得执行sql的对象 Statement</li>
<li>获得返回的结果集</li>
<li>释放连接</li>
</ol>
<blockquote>
<p>DriverManager使用register方法注册一个jdbc驱动，查看Driver.class源文件会发现，其中有一个静态代码块，会直接调用实现，自动创建一个注册驱动</p>
</blockquote>
<hr>
<p>![image-20250320134149834](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320134149834.png)</p>
<hr>
<blockquote>
<p>URL</p>
</blockquote>
<hr>
<p>![image-20250320134108056](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320134108056.png)</p>
<hr>
<blockquote>
<p>Statement执行SQL对象         PrepareStatement执行SQL对象</p>
</blockquote>
<hr>
<p>![image-20250320134308652](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320134308652.png)</p>
<hr>
<blockquote>
<p>Result查询了所有的结果集：封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<hr>
<p>![image-20250320134438317](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320134438317.png)</p>
<hr>
<p>遍历指针</p>
<hr>
<p>![image-20250320134509282](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250320134509282.png)</p>
<hr>
<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>







<h3 id="10-4-Statement对象"><a href="#10-4-Statement对象" class="headerlink" title="10.4 Statement对象"></a>10.4 Statement对象</h3><hr>
<h4 id="10-4-1-编写测试工具类"><a href="#10-4-1-编写测试工具类" class="headerlink" title="10.4.1 编写测试工具类"></a>10.4.1 编写测试工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">user=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.statement.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                properties.load(inputStream);</span><br><span class="line">                driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">                url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.加载一次驱动,只需要加载一次</span></span><br><span class="line">                Class.forName(driver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源，关闭连接</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="10-4-2-编写增删改的方法"><a href="#10-4-2-编写增删改的方法" class="headerlink" title="10.4.2 编写增删改的方法"></a>10.4.2 编写增删改的方法</h4><p><strong>插入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,name,password) values(5,&#x27;张三&#x27;,&#x27;123456&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>删除</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from users where id = 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>修改</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update users set password = &#x27;123456&#x27; where id = 2&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="10-4-3-编写查询的方法"><a href="#10-4-3-编写查询的方法" class="headerlink" title="10.4.3 编写查询的方法"></a>10.4.3 编写查询的方法</h4><p><strong>select</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.ego.statement;</span><br><span class="line"></span><br><span class="line">import com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class TestSelect &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Statement statement = null;</span><br><span class="line">        ResultSet resultSet = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            String sql = &quot;select * from users&quot;;</span><br><span class="line"></span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getString(&quot;name&quot;));</span><br><span class="line">                System.out.println(resultSet.getString(&quot;password&quot;));</span><br><span class="line">                System.out.println(resultSet.getString(&quot;email&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            JdbcUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="10-4-4-SQL注入"><a href="#10-4-4-SQL注入" class="headerlink" title="10.4.4 SQL注入"></a>10.4.4 SQL注入</h4><blockquote>
<p>**&#x3D;&#x3D;SQL注入&#x3D;&#x3D;**：久远的网络安全知识 ， SQL会被拼接，利用or 后面条件为真，实现获取数据库的信息</p>
</blockquote>
<p>详情请见网络安全学习中的SQL注入学习 </p>
<h3 id="10-5-PrepareStatement对象"><a href="#10-5-PrepareStatement对象" class="headerlink" title="10.5 PrepareStatement对象"></a>10.5 PrepareStatement对象</h3><blockquote>
<p>可以防止SQL注入，效率和安全性更好</p>
</blockquote>
<h4 id="10-5-1-增加删除更新"><a href="#10-5-1-增加删除更新" class="headerlink" title="10.5.1 增加删除更新"></a>10.5.1 增加删除更新</h4><blockquote>
<p><strong>insert</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取连接,通过测试工具类实现链接</span></span><br><span class="line">        <span class="comment">//然后获取实现连接对象connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,name,password,email,birthday) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ps = connection.prepareStatement(sql); <span class="comment">//预编译sql语句，先写SQL语句，但是不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">4</span>, <span class="string">&quot;zhangsan@atguigu.com&quot;</span>);</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(System.currentTimeMillis()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>delete</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取连接,通过测试工具类实现链接</span></span><br><span class="line">        <span class="comment">//然后获取实现连接对象connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from users where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ps = connection.prepareStatement(sql); <span class="comment">//预编译sql语句，先写SQL语句，但是不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>update</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取连接,通过测试工具类实现链接</span></span><br><span class="line">        <span class="comment">//然后获取实现连接对象connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update users set name = ?,password = ?,email = ?,birthday = ? where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ps = connection.prepareStatement(sql); <span class="comment">//预编译sql语句，先写SQL语句，但是不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">            ps.setDate(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(System.currentTimeMillis()));</span><br><span class="line">            ps.setInt(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="10-5-2-查询"><a href="#10-5-2-查询" class="headerlink" title="10.5.2 查询"></a>10.5.2 查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译</span></span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置参数</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行查询</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理结果集</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="10-6-IDEA连接数据库"><a href="#10-6-IDEA连接数据库" class="headerlink" title="10.6 IDEA连接数据库"></a>10.6 IDEA连接数据库</h3><hr>
<p><strong>IDEA连接到数据库的步骤：</strong></p>
<p>![image-20250321155500806](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321155500806.png)</p>
<hr>
<p><strong>连接数据库：</strong></p>
<p>![image-20250321155722231](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321155722231.png)</p>
<hr>
<p><strong>添加所需要使用的数据库：</strong></p>
<p>![image-20250321155921525](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321155921525.png)</p>
<hr>
<p><strong>显示数据</strong></p>
<p>![image-20250321160049103](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321160049103.png)</p>
<hr>
<p><strong>修改数据：</strong></p>
<p>![image-20250321160236948](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321160236948.png)</p>
<hr>
<p><strong>执行SQL</strong>：</p>
<p>![image-20250321160725732](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321160725732.png)</p>
<hr>
<h3 id="10-7-事务"><a href="#10-7-事务" class="headerlink" title="10.7 事务"></a>10.7 事务</h3><blockquote>
<p>ACID原则，要么都成功要么都失败</p>
</blockquote>
<p><strong>代码实现：</strong></p>
<blockquote>
<p>成功业务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - 100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + 100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.rollback();    <span class="comment">//如果失败就回滚</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>失败业务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionFailure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - 100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟异常</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;<span class="comment">// 除零异常</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + 100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.rollback();    <span class="comment">//如果失败就回滚</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1.开启业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭自动提交</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>2.提交业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connection.commit();</span><br></pre></td></tr></table></figure>

<p>3.在catch语句中实现回滚</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catch (Exception e) &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.rollback();    //如果失败就回滚</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h3 id="10-8-数据库连接池"><a href="#10-8-数据库连接池" class="headerlink" title="10.8 数据库连接池"></a>10.8 数据库连接池</h3><hr>
<p>![image-20250321165653385](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321165653385.png)</p>
<hr>
<p>编写连接池，实现一个接口DataSource</p>
<blockquote>
<p>开源数据源实现</p>
</blockquote>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid：阿里巴巴</p>
<p>使用了以上的数据库连接池之后，我们在项目中开发就不需要编写连接数据库的代码了</p>
<blockquote>
<p><strong>DBCP</strong></p>
</blockquote>
<p>DBCP配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#????  ??????DBCP???????</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line"></span><br><span class="line">#&lt;!-- ????? --&gt;</span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">#??????</span><br><span class="line">maxActive=<span class="number">50</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- ?????? --&gt;</span><br><span class="line">maxIdle=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- ?????? --&gt;</span><br><span class="line">minIdle=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">#&lt;!-- ???????????? <span class="number">6000</span>??/<span class="number">1000</span>??<span class="number">60</span>? --&gt;</span><br><span class="line">maxWait=<span class="number">60000</span></span><br><span class="line">#JDBC?????????????????????????????=property;?</span><br><span class="line">#???<span class="string">&quot;user&quot;</span> ? <span class="string">&quot;password&quot;</span> ????????????????????????</span><br><span class="line">connectionProperties=useUnicode=<span class="literal">true</span>;characterEncoding=UTF8</span><br><span class="line"></span><br><span class="line">#??????????????????auto-commit????</span><br><span class="line">defaultAutoCommit=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">#driver <span class="keyword">default</span> ????????????????read-only????</span><br><span class="line">#???????????setReadOnly?????????????????????????Informix?</span><br><span class="line">defaultReadOnly=</span><br><span class="line"></span><br><span class="line">#driver <span class="keyword">default</span> ??????????????????TransactionIsolation??</span><br><span class="line">#??????????????javadoc??NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="line">defaultTransactionIsolation=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure>

<p>DBCP工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.dbcp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils_Dbcp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcpconfig.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过数据源去创建, 工厂模式 -- 》创建</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection(); <span class="comment">//从数据源获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源，关闭连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.dbcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.dbcp.utils.JdbcUtils_Dbcp;</span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取连接,通过测试工具类实现链接</span></span><br><span class="line">        <span class="comment">//然后获取实现连接对象connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils_Dbcp.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,name,password,email,birthday) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ps = connection.prepareStatement(sql); <span class="comment">//预编译sql语句，先写SQL语句，但是不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">4</span>, <span class="string">&quot;zhangsan@atguigu.com&quot;</span>);</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(System.currentTimeMillis()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils_Dbcp.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p><strong>C3P0</strong></p>
</blockquote>
<p>C3P0配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!--根标签  和文件名称一致--&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--默认配置标签--&gt;</span><br><span class="line">    &lt;!--&lt;<span class="keyword">default</span>-config&gt;--&gt;</span><br><span class="line">    &lt;!--可以指定名称进行配置  适用于多数据源场景--&gt;</span><br><span class="line">    &lt;named-config name=<span class="string">&quot;myC3p0&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;</span><br><span class="line">            com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span><br><span class="line">            jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy&lt;/property&gt;</span></span><br><span class="line">        &lt;property name=<span class="string">&quot;user&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--初始化连接池的连接数量--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;initialPoolSize&quot;</span>&gt;<span class="number">10</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最大可创建连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxPoolSize&quot;</span>&gt;<span class="number">10</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最小连接数量--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minPoolSize&quot;</span>&gt;<span class="number">2</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--当没有空闲连接时  一次性创建的新连接数量--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireIncrement&quot;</span>&gt;<span class="number">2</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--连接的最大空闲时间  如果一直未使用  则断掉此连接  如果配置为<span class="number">0</span>  则永远不会断掉--&gt;</span><br><span class="line">        &lt;!--&lt;property name=<span class="string">&quot;maxIdleTime&quot;</span>&gt;<span class="number">0</span>&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;/named-config&gt;</span><br><span class="line">    &lt;!--&lt;/<span class="keyword">default</span>-config&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c3p0-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>C3P0工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.c3p0.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.statement.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils_C3p0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过数据源去创建, 工厂模式 -- 》创建</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;myC3p0&quot;</span>);<span class="comment">//配置文件导入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection(); <span class="comment">//从数据源获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源，关闭连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ego.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ego.c3p0.utils.JdbcUtils_C3p0;</span><br><span class="line"><span class="keyword">import</span> com.ego.dbcp.utils.JdbcUtils_Dbcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取连接,通过测试工具类实现链接</span></span><br><span class="line">        <span class="comment">//然后获取实现连接对象connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils_C3p0.getConnection();  <span class="comment">//使用别人实现的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,name,password,email,birthday) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ps = connection.prepareStatement(sql); <span class="comment">//预编译sql语句，先写SQL语句，但是不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">4</span>, <span class="string">&quot;zhangsan@atguigu.com&quot;</span>);</span><br><span class="line">            ps.setDate(<span class="number">5</span>, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(System.currentTimeMillis()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils_C3p0.release(connection, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>结论</p>
</blockquote>
<p>无论使用什么数据源，本质还是一样的，DataSource接口不会更改，方法也不会更改</p>
<p>&#x3D;&#x3D;看看，<strong>学学优秀的人</strong>&#x3D;&#x3D;</p>
<hr>
<p>![image-20250321174953500](E:\hobby\Hexo Blog\blog\source_posts\MySQLdayEnd.assets\image-20250321174953500.png)</p>
<hr>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>—业务级别MySQL学习—</p>
<blockquote>
<p>留待以后深入学习</p>
</blockquote>
]]></content>
  </entry>
</search>
